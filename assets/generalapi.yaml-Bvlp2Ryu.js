const t=Array.from({length:14},()=>({})),e={"#/components/parameters/apiKey":t[0],"#/components/parameters/contentType":t[1],"#/components/responses/AuthenticationError":t[2],"#/components/responses/InternalServerError":t[3],"#/components/schemas/ValidationError":t[4],"#/components/schemas/ConflictError":t[5],"#/components/responses/LambdaTimeout":t[6],"#/components/schemas/Customer":t[7],"#/components/schemas/SuccessEnvelope":t[8],"#/components/schemas/BadRequest":t[9],"#/components/schemas/CardAlreadyAssigned":t[10],"#/components/schemas/PinSetting":t[11],"#/components/schemas/PinChanging":t[12],"#/components/responses/ValidationError":t[13]};Object.assign(t[0],{name:"x-api-key",in:"header",required:!0,schema:{type:"string"},description:"API key for authentication"});Object.assign(t[1],{name:"Content-Type",in:"header",required:!0,schema:{type:"string",default:"application/json"},description:"Content type of the request body"});Object.assign(t[2],{description:"Authentication context is missing or invalid",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_AUTH_CONTEXT"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["Authentication context is missing"]}}}}},examples:{authError:{summary:"Authentication error",value:{code:"ERR_AUTH_CONTEXT",params:{message:"Authentication context is missing"}}}}}}});Object.assign(t[3],{description:"An unexpected error occurred",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_INTERNAL_SERVER_ERROR"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["An unexpected error occurred. Please try again later."]}}}}},examples:{internalError:{summary:"Internal server error",value:{code:"ERR_INTERNAL_SERVER_ERROR",params:{message:"An unexpected error occurred. Please try again later."}}}}}}});Object.assign(t[4],{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_VALIDATION_FAILED"]},params:{type:"object",properties:{message:{type:"string",examples:["Missing required field or invalid field format"]},missingProperty:{type:"string",description:"The name of the missing or invalid property",examples:["cardRefNum"]}}}}});Object.assign(t[5],{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_CARD_DECLINED"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["Operation was declined"]}}}}});Object.assign(t[6],{description:"Gateway Timeout ‚Äì task took too long",content:{"application/json":{schema:{type:"object",required:["errorMessage"],properties:{errorMessage:{type:"string",examples:["Task timed out after 1.10 seconds"]}}},examples:{lambdaTimeout:{summary:"Lambda execution timed out",value:{errorMessage:"Task timed out after 1.10 seconds"}}}}}});Object.assign(t[7],{type:"object",required:["requestType","accountNum","cardRefNum","embossedName","firstName","lastName","nationalId","passport"],properties:{requestType:{type:"string",description:"**Required.** Request type:\n- `NewAccountNewCustomer`: New customer  \n- `NewAccountExistingCustomer`: Existing customer\n"},cardRefNum:{type:"string",description:"**Required.** Card reference number"},embossedName:{type:"string",description:"**Required.** Name to be embossed on the card"},accountNum:{type:"string",description:"**Required.** Account number to link to the card"},firstName:{type:"string",description:"**Conditionally Required:** Required when requestType is 'NewAccountNewCustomer'. Customer's first name"},middleName:{type:"string",description:"**Optional.** Customer's middle name"},lastName:{type:"string",description:"**Conditionally Required:** Required when requestType is 'NewAccountNewCustomer'. Customer's last name"},nationalId:{type:"string",description:"**Conditionally Required:** One of nationalId or passport is required. Customer's national ID"},passport:{type:"string",description:"**Conditionally Required:** One of nationalId or passport is required. Customer's passport number"},birthDate:{type:"string",format:"date",pattern:"^\\d{4}-\\d{2}-\\d{2}$",description:"**Optional.** Date of birth in YYYY-MM-DD format",examples:["1990-01-01"]},email:{type:"string",format:"email",description:"**Optional.** Customer's email address"},mobilePhone:{type:"string",description:"**Optional.** Customer's mobile phone number"},streetTitle:{type:"string",description:"**Optional.** Customer's street address"},zip:{type:"string",description:"**Optional.** Customer's postal code"}}});Object.assign(t[8],{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["SUCCESS_REQUEST_PROCESSED"]},params:{type:"object",required:["requestType"],properties:{requestType:{type:"string",examples:["NewAccountNewCustomer"]}}}}});Object.assign(t[9],{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_VALIDATION_FAILED"]},params:{type:"object",required:["missingProperty"],properties:{missingProperty:{type:"string",examples:["requestType"]}}}}});Object.assign(t[10],{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_CARD_ALREADY_ASSIGNED"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["This Card Is Already Assigned To A Customer!"]}}}}});Object.assign(t[11],{type:"object",required:["pan","pinBlock"],properties:{pan:{type:"string",description:"**Required.** The Primary Account Number (PAN) of the card",examples:["1234567890123456"]},pinBlock:{type:"string",description:"**Required.** The encrypted PIN block containing the new PIN",examples:["ABC123DEF456"]}}});Object.assign(t[12],{type:"object",required:["pan","oldPinBlock","newPinBlock"],properties:{pan:{type:"string",description:"**Required.** The Primary Account Number (PAN) of the card",examples:["1234567890123456"]},oldPinBlock:{type:"string",description:"**Required.** The encrypted PIN block containing the current PIN for verification",examples:["OLD123PIN456"]},newPinBlock:{type:"string",description:"**Required.** The encrypted PIN block containing the new PIN to be set",examples:["NEW789PIN012"]}}});Object.assign(t[13],{description:"Validation failed",content:{"application/json":{schema:e["#/components/schemas/ValidationError"],examples:{validationError:{summary:"Validation failed",value:{code:"ERR_VALIDATION_FAILED",params:{message:"Missing required field or invalid field format",missingProperty:"cardRefNum"}}}}}}});const s={openapi:"3.1.1",info:{title:"Enza REST API Documentation",description:`## Overview

Welcome to the Enza REST API Developer Portal. Our API provides seamless integration . This portal offers all the necessary tools, detailed documentation, and API endpoints required to empower your financial operations with real-time card issuance capabilities.

Follow this guide to:
- Understand API authentication and security requirements
- Generate and configure the credentials required to access the Enza Developers API
- Use the API endpoints to create cards and manage customer accounts
- Learn best practices for integrating with our platform

---

## Step 1: Generate API Credentials

### API Key Authentication

All API requests require an **API Key** for authentication. The API key must be included in the request header:

\`\`\`
x-api-key: YOUR_API_KEY_HERE
\`\`\`

### Development vs Production Keys

- Both Development/UAT and Production API Keys will be shared securely through encrypted channels upon agreement and approval.

### Security Requirements

‚ö†Ô∏è **Important Security Measures:**

1. **IP Whitelisting**: Your server IP addresses must be whitelisted before you can access the APIs
   - Contact our support team to whitelist your IPs
   - Provide both development and production IP addresses

2. **Secure Key Storage**: Never expose your API keys in client-side code or public repositories

3. **HTTPS Only**: All API requests must use HTTPS protocol

---


---

## Key Features

- üí≥ **Instant Card Issuance**: Issue physical and virtual cards in real-time
- üõ†Ô∏è **Card Management**: Complete lifecycle management from creation to closure
- üìä **Transaction Monitoring**: Real-time transaction tracking and reporting
- üîê **PIN Management**: Secure PIN operations for enhanced security
- üõçÔ∏è **E-Commerce Controls**: Manage online transaction capabilities

---

## Next Steps

1. **Review Use Cases**: Explore the different API endpoints and understand the scenarios for each
2. **Integration Testing**: Test your integration in the UAT environment
3. **Request Production Access**: Contact our team when ready to go live
4. **Monitor & Optimize**: Use our transaction APIs to monitor card usage and optimize your integration

---

## Support

If you require further clarification or business alignment, please reach out to the assigned Product Manager.
`,version:"2025-02-16T14:26:47Z"},servers:[{url:"https://uat-api.enza.cloud/TX/v1"}],tags:[{name:"Overview",description:`# Quick Start Guide

Welcome to the Enza Developer Portal. Follow the steps in the API description above to get started with your integration.

**Key Requirements:**
- API Key authentication
- IP Whitelisting
- HTTPS protocol

**Time to Complete:** 30 minutes
`},{name:"Card Management",description:"Operations for creating, activating, managing card status, and retrieving card details"},{name:"Customer Management",description:"Retrieve and manage customer information"},{name:"Transactions",description:"View and manage card transaction history"},{name:"E-Commerce",description:"Manage e-commerce and online transaction settings"},{name:"PIN Management",description:"Set and change card PINs securely"},{name:"Preproduced Card",description:"Instant card issuance for new and existing customers"},{name:"Combined Section",description:"Combined section APIs"}],paths:{"/customers/create":{post:{operationId:"createCustomer",summary:"Create New Customer",description:`Create a new customer (subject) in the system.

**Required Fields:**
- Last name
- Birth date (YYYY-MM-DD)
- One of: National ID, Passport, or Identity ID

**Process:**
1. Check if customer already exists
2. Create customer with provided details
3. Return success confirmation
`,tags:["Customer Management"],parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",required:["lastName","birthDate","nationalId","passport","identityId"],properties:{lastName:{type:"string",description:"**Required.** Customer's last name",examples:["Doe"]},firstName:{type:"string",description:"**Optional.** Customer's first name",examples:["John"]},middleName:{type:"string",description:"**Optional.** Customer's middle name",examples:["Michael"]},birthDate:{type:"string",format:"date",pattern:"^\\d{4}-\\d{2}-\\d{2}$",description:"**Required.** Customer's birth date in YYYY-MM-DD format",examples:["1990-01-01"]},nationalId:{type:"string",description:"**Conditionally Required:** National ID (required if passport and identityId not provided)",examples:["7623835006"]},passport:{type:"string",description:"**Conditionally Required:** Passport number (required if nationalId and identityId not provided)",examples:["AB1234567"]},identityId:{type:"string",description:"**Conditionally Required:** Identity ID (required if nationalId and passport not provided)",examples:["ID123456"]},email:{type:"string",format:"email",description:"**Optional.** Customer's email address",examples:["john.doe@example.com"]},mobilePhone:{type:"string",description:"**Optional.** Customer's mobile phone number",examples:["9991234567"]},streetTitle:{type:"string",description:"**Optional.** Customer's street address",examples:["Baker's Str"]},zip:{type:"string",description:"**Optional.** Customer's postal code",examples:["WC1X 9NX"]}}},examples:{withNationalId:{summary:"Create customer with National ID",value:{lastName:"Doe",firstName:"John",birthDate:"1990-01-01",nationalId:"7623835006",email:"john.doe@example.com",mobilePhone:"9991234567",streetTitle:"Baker's Str",zip:"WC1X 9NX"}},withPassport:{summary:"Create customer with Passport",value:{lastName:"Smith",firstName:"Jane",birthDate:"1985-05-15",passport:"AB1234567",email:"jane.smith@example.com"}}}}}},responses:{200:{description:"Customer created successfully",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["SUCCESS_CUSTOMER_CREATED"]},params:{type:"object",properties:{message:{type:"string",examples:["Customer created successfully"]}}}}},examples:{success:{summary:"Customer created",value:{code:"SUCCESS_CUSTOMER_CREATED",params:{message:"Customer created successfully"}}}}}}},400:{description:"Validation error",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string"},params:{type:"object",properties:{message:{type:"string"}}}}},examples:{missingField:{summary:"Missing required field",value:{code:"ERR_VALIDATION_FAILED",params:{message:"Missing required field: lastName"}}},invalidBirthDate:{summary:"Invalid birth date format",value:{code:"ERR_VALIDATION_FAILED",params:{message:"Invalid birthDate format. Expected YYYY-MM-DD"}}},invalidData:{summary:"Invalid customer data",value:{code:"ERR_VALIDATION_FAILED",params:{message:"Invalid customer data"}}}}}}},401:e["#/components/responses/AuthenticationError"],409:{description:"Customer already exists",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_CUSTOMER_ALREADY_EXISTS"]},params:{type:"object",properties:{message:{type:"string",examples:["Customer already exists"]}}}}},examples:{customerExists:{summary:"Customer already exists",value:{code:"ERR_CUSTOMER_ALREADY_EXISTS",params:{message:"Customer already exists"}}}}}}},500:e["#/components/responses/InternalServerError"]}}},"/customers/search":{post:{operationId:"checkCustomerExistence",summary:"Check Customer Existence",description:`Check if a customer exists in the system or not.

**Search By:**
- National ID number, OR
- Passport number, OR
- ID number
`,tags:["Customer Management"],parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",required:["nationalId","passport","identityId"],properties:{nationalId:{type:"string",description:"**Conditionally Required:** One of nationalId, passport, or identityId is required. Customer's national ID",examples:["1234567890"]},passport:{type:"string",description:"**Conditionally Required:** One of nationalId, passport, or identityId is required. Customer's passport number",examples:["AB1234567"]},identityId:{type:"string",description:"**Conditionally Required:** One of nationalId, passport, or identityId is required. External ID number provided by the bank (use this if customer is not working with nationalId or passport)",examples:["ID123456"]}}},examples:{withNationalId:{summary:"Check by National ID",value:{nationalId:"1234567890"}},withPassport:{summary:"Check by Passport",value:{passport:"AB1234567"}},withId:{summary:"Check by ID",value:{identityId:"ID123456"}}}}}},responses:{200:{description:"Customer exists in the system",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["SUCCESS_CUSTOMER_CHECK"]},params:{type:"object",required:["exists","message"],properties:{exists:{type:"boolean",description:"Whether the customer exists in the system",examples:[!0]},message:{type:"string",description:"Success message",examples:["Customer exists"]}}}}},examples:{customerExists:{summary:"Customer exists in system",value:{code:"SUCCESS_CUSTOMER_CHECK",params:{exists:!0,message:"Customer exists"}}}}}}},400:{description:"Bad request ‚Äì validation failed",content:{"application/json":{schema:e["#/components/schemas/ValidationError"],examples:{missingDocumentId:{summary:"Missing document ID",value:{code:"ERR_VALIDATION_FAILED",params:{message:"One of the following fields is required: nationalId, passport, identityId"}}}}}}},401:e["#/components/responses/AuthenticationError"],409:{description:"Customer not found",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_CUSTOMER_NOT_FOUND"]},params:{type:"object",required:["exists","message"],properties:{exists:{type:"boolean",description:"Whether the customer exists in the system",examples:[!1]},message:{type:"string",examples:["Customer not found"]}}}}},examples:{customerNotFound:{summary:"Customer does not exist",value:{code:"ERR_CUSTOMER_NOT_FOUND",params:{exists:!1,message:"Customer not found"}}}}}}},500:e["#/components/responses/InternalServerError"]}}},"/customers/details":{post:{operationId:"getCustomerDetails",summary:"Show Customer Details",description:`Retrieve comprehensive customer details by National ID, Passport, or ID.

**Search By:**
- National ID number, OR
- Passport number, OR
- ID number
`,tags:["Customer Management"],parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",required:["nationalId","passport","identityId"],properties:{nationalId:{type:"string",description:"**Conditionally Required:** One of nationalId, passport, or identityId is required. Customer's national ID",examples:["NAT123456"]},passport:{type:"string",description:"**Conditionally Required:** One of nationalId, passport, or identityId is required. Customer's passport number",examples:["passport03"]},identityId:{type:"string",description:"**Conditionally Required:** One of nationalId, passport, or identityId is required. External ID number provided by the bank (use this if customer is not working with nationalId or passport)",examples:["ID123456"]}}},examples:{withPassport:{summary:"Search by Passport",value:{passport:"passport03"}},withNationalId:{summary:"Search by National ID",value:{nationalId:"NAT123456"}},withId:{summary:"Search by ID",value:{identityId:"ID123456"}}}}}},responses:{200:{description:"Customer details successfully retrieved",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["SUCCESS_CUSTOMER_DETAILS_RETRIEVED"]},params:{type:"object",required:["firstName","lastName","birthDate","status","email","mobilePhone"],properties:{firstName:{type:"string",description:"Customer first name",examples:["omnia"]},middleName:{type:"string",description:"Customer middle name",examples:["API"]},lastName:{type:"string",description:"Customer last name",examples:["Testing"]},birthDate:{type:"string",format:"date",description:"Date of birth (YYYY-MM-DD format)",examples:["1989-12-31"]},status:{type:"string",description:"Customer status (N=Normal)",examples:["N"]},email:{type:"string",format:"email",description:"Primary email address",examples:["a@a.com"]},mobilePhone:{type:"string",description:"Primary mobile phone",examples:["01158900152"]},homeAddress:{type:"object",properties:{streetTitle:{type:"string",description:"Street address",examples:["asd"]},zip:{type:"string",description:"Postal code",examples:["11728"]}}}}}}},examples:{successResponse:{summary:"Customer details retrieved successfully",value:{code:"SUCCESS_CUSTOMER_DETAILS_RETRIEVED",params:{firstName:"omnia",middleName:"API",lastName:"Testing",birthDate:"1989-12-31",status:"N",email:"a@a.com",mobilePhone:"01158900152",homeAddress:{streetTitle:"asd",zip:"11728"}}}}}}}},400:{description:"Bad request ‚Äì validation failed",content:{"application/json":{schema:e["#/components/schemas/ValidationError"],examples:{badRequestExample:{summary:"Missing required fields",value:{code:"ERR_VALIDATION_FAILED",params:{message:"Both nationalId and passport are required"}}}}}}},401:e["#/components/responses/AuthenticationError"],409:{description:"Customer not found",content:{"application/json":{schema:e["#/components/schemas/ConflictError"],examples:{customerNotFound:{summary:"Customer not found",value:{code:"ERR_REQUEST_DECLINED",params:{message:"Customer not found"}}}}}}},500:e["#/components/responses/InternalServerError"],504:e["#/components/responses/LambdaTimeout"]}}},"/customers/update":{post:{operationId:"updateCustomerDetails",summary:"Update Customer Details",description:`Update customer information in the system.

**Search By (one required):**
- National ID number, OR
- Passport number, OR
- ID number
`,tags:["Customer Management"],parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",required:["nationalId","passport","identityId"],properties:{nationalId:{type:"string",description:"**Conditionally Required:** One of nationalId, passport, or identityId is required. Customer's national ID",examples:["NAT123456"]},passport:{type:"string",description:"**Conditionally Required:** One of nationalId, passport, or identityId is required. Customer's passport number",examples:["passport03"]},identityId:{type:"string",description:"**Conditionally Required:** One of nationalId, passport, or identityId is required. External ID number",examples:["ID123456"]},firstName:{type:"string",description:"**Optional:** Customer's first name",examples:["John"]},lastName:{type:"string",description:"**Optional:** Customer's last name",examples:["Emboss"]},middleName:{type:"string",description:"**Optional:** Customer's middle name",examples:["William"]},birthDate:{type:"string",format:"date",description:"**Optional:** Date of birth in YYYY-MM-DD format",examples:["1990-01-01"]},email:{type:"string",format:"email",description:"**Optional:** Email address",examples:["Test@test.com"]},mobilePhone:{type:"string",description:"**Optional:** Mobile phone number",examples:["9991234567"]},streetTitle:{type:"string",description:"**Optional:** Street address",examples:["Baker's Str"]},zip:{type:"string",description:"**Optional:** Postal/ZIP code",examples:["WC1X 9NX"]}}},examples:{fullUpdateWithPassport:{summary:"Update all fields using passport",value:{passport:"passport03",firstName:"John",lastName:"Emboss",middleName:"William",birthDate:"1990-01-01",email:"Test@test.com",mobilePhone:"9991234567",streetTitle:"Baker's Str",zip:"WC1X 9NX"}},partialUpdateWithNationalId:{summary:"Update only email and phone using national ID",value:{nationalId:"NAT123456",email:"newemail@test.com",mobilePhone:"1234567890"}},updateWithId:{summary:"Update using ID",value:{identityId:"ID123456",lastName:"NewLastName",email:"updated@test.com"}}}}}},responses:{200:{description:"Customer details successfully updated",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["SUCCESS_CUSTOMER_UPDATED"]},params:{type:"object",required:["message"],properties:{message:{type:"string",description:"Success message",examples:["Customer details updated successfully"]}}}}},examples:{successResponse:{summary:"Customer updated successfully",value:{code:"SUCCESS_CUSTOMER_UPDATED",params:{message:"Customer details updated successfully"}}}}}}},400:{description:"Bad request ‚Äì validation failed",content:{"application/json":{schema:e["#/components/schemas/ValidationError"],examples:{missingIdentifier:{summary:"Missing customer identifier",value:{code:"ERR_VALIDATION_FAILED",params:{message:"One of the following fields is required: nationalId, passport, identityId"}}},invalidBirthDate:{summary:"Invalid birth date format",value:{code:"ERR_VALIDATION_FAILED",params:{message:"Invalid birthDate format. Expected YYYY-MM-DD"}}}}}}},401:e["#/components/responses/AuthenticationError"],409:{description:"Customer not found",content:{"application/json":{schema:e["#/components/schemas/ConflictError"],examples:{customerNotFound:{summary:"Customer not found",value:{code:"ERR_CUSTOMER_NOT_FOUND",params:{message:"Customer not found"}}}}}}},500:e["#/components/responses/InternalServerError"],504:e["#/components/responses/LambdaTimeout"]}}},"/instant-issuing":{post:{operationId:"instantIssueCard",summary:"Instant Issue Card",description:`Instantly issue a card for a new or existing customer.

This endpoint handles two scenarios:

| Scenario                | RequestType Value           |
|-------------------------|-----------------------------|
| New customer            | \`NewAccountNewCustomer\`     |
| Existing customer       | \`NewAccountExistingCustomer\`|
`,tags:["Combined Sections"],parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:e["#/components/schemas/Customer"],examples:{default:{value:{requestType:"NewAccountNewCustomer",lastName:"EEE",firstName:"Cust02",birthDate:"1990-01-20",passport:"76238310075",email:"test@test.com",mobilePhone:"9991234567",streetTitle:"Baker's Str",zip:"WC1X 9NX",accountNum:"AAABBB150573",cardRefNum:"000515",embossedName:"Cust02 New"}}}}}},responses:{200:{description:"Successful response",content:{"application/json":{schema:e["#/components/schemas/SuccessEnvelope"],examples:{directSuccess:{summary:"Direct success example",value:{code:"SUCCESS_REQUEST_PROCESSED",params:{requestType:"NewAccountNewCustomer"}}}}}}},400:{description:"Bad request ‚Äì validation failed",content:{"application/json":{schema:e["#/components/schemas/BadRequest"],examples:{validationFailure:{summary:"Missing required field",value:{code:"ERR_VALIDATION_FAILED",params:{missingProperty:"requestType"}}}}}}},401:e["#/components/responses/AuthenticationError"],409:{description:"Conflict ‚Äì card already assigned",content:{"application/json":{schema:e["#/components/schemas/CardAlreadyAssigned"],examples:{conflictError:{summary:"Card already assigned example",value:{code:"ERR_CARD_ALREADY_ASSIGNED",params:{message:"This Card Is Already Assigned To A Customer!"}}}}}}},500:e["#/components/responses/InternalServerError"],504:{description:"Gateway Timeout",content:{"application/json":{schema:{type:"object",required:["errorMessage"],properties:{errorMessage:{type:"string",description:"Timeout error message",examples:["Task timed out after 1.10 seconds"]}}},examples:{lambdaTimeout:{summary:"Lambda execution timed out",value:{errorMessage:"Task timed out after 1.10 seconds"}}}}}}}}},"/cards/tds-enrollment":{post:{operationId:"updateEcommerceStatus",summary:"Enable or Disable E-Commerce Transactions",description:`Control e-commerce (online) transaction capabilities for a card.
`,tags:["E-Commerce"],parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{description:"Details for updating ECstatus of a card.",content:{"application/json":{schema:{type:"object",required:["ecStatusEnable","cardRefNum"],properties:{cardRefNum:{type:"string",description:"**Required.** Card reference number"},ecStatusEnable:{type:"string",description:'**Required.** EC status: `"1"` = Enrolled, `"0"` = Not enrolled'}}},examples:{default:{value:{cardRefNum:"000515",ecStatusEnable:"1"}}}}}},responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["SUCCESS_ECSTATUS_CHANGED"]},params:{type:"object",required:["status"],properties:{status:{type:"string",examples:["Enabled"]}}}}},examples:{successResponse:{summary:"Successful Request Example",value:{code:"SUCCESS_ECSTATUS_CHANGED",params:{status:"Enabled"}}}}}}},400:{description:"Bad request ‚Äì validation failed",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_VALIDATION_FAILED"]},params:{type:"object",required:["missingProperty"],properties:{missingProperty:{type:"string",examples:["cardRefNum"]}}}}},examples:{badRequestExample:{summary:"Missing required field",value:{code:"ERR_VALIDATION_FAILED",params:{missingProperty:"cardRefNum"}}}}}}},401:e["#/components/responses/AuthenticationError"],409:{description:"Conflict ‚Äì card not found",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_READTOKEN_DECLINED"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["Card not found"]}}}}},examples:{conflictExample:{summary:"Card not found",value:{code:"ERR_READTOKEN_DECLINED",params:{message:"Card not found"}}}}}}},500:e["#/components/responses/InternalServerError"],504:e["#/components/responses/LambdaTimeout"]}}},"/cards/update-status-by-ref":{post:{operationId:"updateCardStatusByRefNum",tags:["Card Management"],summary:"Update Card Status by Reference Number",description:`Update card status using the card reference number.
`,parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",required:["cardStatus","cardRefNum","reason"],properties:{cardStatus:{type:"string",description:"**Required.** Allowed values ‚áí **Active** | **Deactivated** | **Blocked**",enum:["Active","Deactivated","Blocked"],examples:["Active"]},cardRefNum:{type:"string",description:"**Required.** Unique card reference number"},reason:{type:"string",description:"**Optional.** Reason for the status change (e.g., 'deactivated by customer', 'blocked by bank')"}}},examples:{default:{value:{cardStatus:"Active",cardRefNum:"000515",reason:"Customer request"}}}}}},responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["SUCCESS_CARDSTATUS_CHANGED"]},params:{type:"object",required:["status"],properties:{status:{type:"string",examples:["Active"]}}}}},examples:{successResponse:{summary:"Successful card-status change",value:{code:"SUCCESS_CARDSTATUS_CHANGED",params:{status:"Active"}}}}}}},400:{description:"Bad request ‚Äì validation failed",content:{"application/json":{schema:e["#/components/schemas/ValidationError"],examples:{badRequestExample:{summary:"Missing required field",value:{code:"ERR_VALIDATION_FAILED",params:{message:"Missing required field: cardRefNum"}}}}}}},401:e["#/components/responses/AuthenticationError"],409:{description:"Conflict ‚Äì card declined",content:{"application/json":{schema:e["#/components/schemas/ConflictError"],examples:{conflictExample:{summary:"Card declined ‚Äì Card not found",value:{code:"ERR_CARD_DECLINED",params:{message:"Card not found"}}}}}}},500:e["#/components/responses/InternalServerError"],504:e["#/components/responses/LambdaTimeout"]}}},"/pin/set":{post:{operationId:"setCardPin",summary:"Set PIN for Card",description:`Set a new PIN for a card using the encrypted PIN block.
`,tags:["PIN Management"],parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:e["#/components/schemas/PinSetting"],examples:{default:{value:{pan:"1234567890123456",pinBlock:"ABC123DEF456"}}}}}},responses:{200:{description:"PIN successfully set",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["SUCCESS_PIN_SET"]},params:{type:"object"}}},examples:{successResponse:{summary:"PIN Set Successfully",value:{code:"SUCCESS_PIN_SET",params:{}}}}}}},400:{description:"Bad request ‚Äì validation failed",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_VALIDATION_FAILED"]},params:{type:"object",properties:{message:{type:"string",examples:["Invalid PIN block format"]},missingProperty:{type:"string",examples:["pan"]}}}}},examples:{badRequestExample:{summary:"Missing required field",value:{code:"ERR_VALIDATION_FAILED",params:{missingProperty:"pan"}}}}}}},401:e["#/components/responses/AuthenticationError"],409:{description:"Conflict ‚Äì PIN setting declined",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_PIN_SETTING_DECLINED"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["Invalid PIN block format"]}}}}},examples:{conflictExample:{summary:"PIN setting declined",value:{code:"ERR_PIN_SETTING_DECLINED",params:{message:"Invalid PIN block format"}}},invalidPinBlock:{summary:"Invalid PIN block format",value:{code:"ERR_INVALID_PIN_BLOCK",params:{message:"Invalid PIN block format"}}}}}}},500:e["#/components/responses/InternalServerError"],504:{description:"Request timeout",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_TIMEOUT"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["Request timeout. Please try again later."]}}}}},examples:{timeoutExample:{summary:"Request timeout",value:{code:"ERR_TIMEOUT",params:{message:"Request timeout. Please try again later."}}}}}}}}}},"/cards/retrieve-pin-block":{post:{operationId:"showPinForCard",summary:"Show PIN for Card",description:`Display the encrypted PIN block for a card.

**Note:** If the PIN block is not stored or restricted by policy, an error will be returned.
`,tags:["PIN Management"],parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:{required:["cardId"],type:"object",properties:{cardId:{type:"string",description:"**Required.** Card ID",examples:["12345"]}}},examples:{default:{value:{cardId:"12345"}}}}}},responses:{200:{description:"PIN successfully displayed",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["SUCCESS_PIN_BLOCK_RETRIEVED"]},params:{type:"object",required:["cardId","pinBlock"],properties:{cardId:{type:"string",description:"Card ID",examples:["12345"]},pinBlock:{type:"string",description:"Encrypted PIN block",examples:["ABC123DEF456"]}}}}},examples:{successResponse:{summary:"PIN displayed successfully",value:{code:"SUCCESS_PIN_BLOCK_RETRIEVED",params:{cardId:"12345",pinBlock:"ABC123DEF456"}}}}}}},400:{description:"Bad request ‚Äì validation failed",content:{"application/json":{schema:e["#/components/schemas/ValidationError"],examples:{badRequestExample:{summary:"Missing required field",value:{code:"ERR_VALIDATION_FAILED",params:{message:"Missing required field: cardId"}}}}}}},401:e["#/components/responses/AuthenticationError"],409:{description:"Conflict ‚Äì request declined",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_PIN_BLOCK_NOT_AVAILABLE"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["PIN block is not available"]}}}}},examples:{pinBlockNotAvailable:{summary:"PIN block not available",value:{code:"ERR_PIN_BLOCK_NOT_AVAILABLE",params:{message:"PIN block is not available. Either the value isn't stored or your response is restricted by policy"}}},pinBlockNotFound:{summary:"PIN block not found",value:{code:"ERR_PIN_BLOCK_NOT_FOUND",params:{message:"PIN block not found for this card"}}},cardNotFound:{summary:"Card not found",value:{code:"ERR_CARD_NOT_FOUND",params:{message:"Card"}}}}}}},500:e["#/components/responses/InternalServerError"],504:e["#/components/responses/LambdaTimeout"]}}},"/pin/change":{post:{operationId:"changeCardPin",summary:"Change PIN for Card",description:`Change a card's PIN by providing both the current and new encrypted PIN blocks.
`,tags:["PIN Management"],parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:e["#/components/schemas/PinChanging"],examples:{default:{value:{pan:"1234567890123456",oldPinBlock:"OLD123PIN456",newPinBlock:"NEW789PIN012"}}}}}},responses:{200:{description:"PIN successfully changed",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["SUCCESS_PIN_CHANGED"]},params:{type:"object"}}},examples:{successResponse:{summary:"PIN Changed Successfully",value:{code:"SUCCESS_PIN_CHANGED"}}}}}},400:{description:"Bad request ‚Äì validation failed",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_VALIDATION_FAILED"]},params:{type:"object",properties:{missingProperty:{type:"string",examples:["oldPinBlock"]}}}}},examples:{badRequestExample:{summary:"Missing required field",value:{code:"ERR_VALIDATION_FAILED",params:{missingProperty:"oldPinBlock"}}}}}}},401:e["#/components/responses/AuthenticationError"],409:{description:"Conflict ‚Äì PIN change declined",content:{"application/json":{schema:{type:"object",required:["code","params"]},properties:{code:{type:"string",examples:["ERR_PIN_CHANGE_DECLINED"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["Invalid PIN block format"]}}}},examples:{conflictExample:{summary:"PIN change declined",value:{code:"ERR_PIN_CHANGE_DECLINED",params:{message:"Invalid PIN block format"}}},invalidPinBlock:{summary:"Invalid PIN block format",value:{code:"ERR_INVALID_PIN_BLOCK",params:{message:"Invalid PIN block format"}}}}}}},500:e["#/components/responses/InternalServerError"],504:{description:"Request timeout",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_TIMEOUT"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["Request timeout. Please try again later."]}}}}},examples:{timeoutExample:{summary:"Request timeout",value:{code:"ERR_TIMEOUT",params:{message:"Request timeout. Please try again later."}}}}}}}}}},"/cards/update-status-by-id":{post:{operationId:"updateCardStatusById",tags:["Card Management"],summary:"Update Card Status by Card ID",description:`Update card status using the card ID.
`,parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",required:["cardStatus","cardId","reason"],properties:{cardStatus:{type:"string",description:"**Required.** Allowed values ‚áí **Active** | **Deactivated** | **Blocked**",enum:["Active","Deactivated","Blocked"],examples:["Active"]},cardId:{type:"string",description:"**Required.** Unique card ID",examples:["12345"]},reason:{type:"string",description:"**Optional.** Reason for status change",examples:["Customer request"]}}},examples:{default:{value:{cardStatus:"Active",cardId:"12345"}}}}}},responses:{200:{description:"Card status successfully changed",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["SUCCESS_CARDSTATUS_CHANGED"]},params:{type:"object",required:["status"],properties:{status:{type:"string",examples:["Active"]}}}}},examples:{successResponse:{summary:"Successful card-status change",value:{code:"SUCCESS_CARDSTATUS_CHANGED",params:{status:"Active"}}}}}}},400:{description:"Bad request ‚Äì validation failed",content:{"application/json":{schema:e["#/components/schemas/ValidationError"],examples:{badRequestExample:{summary:"Missing required field",value:{code:"ERR_VALIDATION_FAILED",params:{message:"Missing required field: cardId"}}}}}}},401:e["#/components/responses/AuthenticationError"],409:{description:"Conflict ‚Äì card status change declined",content:{"application/json":{schema:e["#/components/schemas/ConflictError"],examples:{conflictExample:{summary:"Card declined",value:{code:"ERR_CARD_DECLINED",params:{message:"Card not found"}}}}}}},500:e["#/components/responses/InternalServerError"],504:e["#/components/responses/LambdaTimeout"]}}},"/cards/top-ups":{post:{operationId:"topUpCard",summary:"Top Up Card",description:`Load funds instantly onto a card. This operation credits the specified amount to the card's available balance, enabling immediate use for transactions.

**Transaction Flow:**
1. Validate card existence and status
2. Verify source account balance
3. Execute real-time fund transfer
4. Update card balance immediately
5. Return transaction confirmation with approval code
`,tags:["Card Management"],parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",required:["cardId","ccy","amount"],properties:{cardId:{type:"string",pattern:"^[0-9]+$",description:"**Required.** Card ID (numeric only)",examples:["3280"]},ccy:{type:"string",pattern:"^[0-9]+$",description:"**Required.** Currency code (numeric only, e.g., 936 for GHS)",examples:["936"]},amount:{type:"string",pattern:"^[0-9]+(\\\\.[0-9]{1,2})?$",description:"**Required.** Amount to top up (decimal with up to 2 decimal places)",examples:["100.12"]}}},examples:{default:{value:{cardId:"3280",ccy:"936",amount:"100.12"}}}}}},responses:{200:{description:"Top-up successfully completed",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["SUCCESS_TOPUP_COMPLETED"]},params:{type:"object",required:["transactionId","approvalCode","amount","currency"],properties:{transactionId:{type:"string",description:"Transaction ID",examples:["251026743389956338"]},approvalCode:{type:"string",description:"Transaction approval code",examples:["6Q212F"]},amount:{type:"string",description:"Top-up amount",examples:["100.12"]},currency:{type:"string",description:"Currency code",examples:["936"]}}}}},examples:{successResponse:{summary:"Top-up completed successfully",value:{code:"SUCCESS_TOPUP_COMPLETED",params:{transactionId:"251026743389956338",approvalCode:"6Q212F",amount:"100.12",currency:"936"}}}}}}},400:{description:"Bad request ‚Äì validation failed",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_VALIDATION_FAILED"]},params:{type:"object",required:["field","message"],properties:{field:{type:"string",description:"Field name that failed validation",examples:["cardId"]},message:{type:"string",description:"Validation error message",examples:["Card ID must contain only numbers"]}}}}},examples:{invalidCardId:{summary:"Invalid card ID format",value:{code:"ERR_VALIDATION_FAILED",params:{field:"cardId",message:"Card ID must contain only numbers"}}},invalidCurrency:{summary:"Invalid currency code format",value:{code:"ERR_VALIDATION_FAILED",params:{field:"ccy",message:"Currency code must contain only numbers"}}},invalidAmount:{summary:"Invalid amount format",value:{code:"ERR_VALIDATION_FAILED",params:{field:"amount",message:"Amount must be a valid number with up to 2 decimal places"}}},missingField:{summary:"Missing required field",value:{code:"ERR_VALIDATION_FAILED",params:{field:"cardId",message:"Card ID is required"}}}}}}},401:e["#/components/responses/AuthenticationError"],409:{description:"Conflict ‚Äì top-up declined",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_CARD_NOT_FOUND"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["Card not found"]}}}}},examples:{cardNotFound:{summary:"Card not found",value:{code:"ERR_CARD_NOT_FOUND",params:{message:"Card not found"}}},insufficientBalance:{summary:"Insufficient balance",value:{code:"ERR_INSUFFICIENT_BALANCE",params:{message:"Insufficient balance"}}},accountNotFound:{summary:"Account not found",value:{code:"ERR_ACCOUNT_NOT_FOUND",params:{message:"Account not found"}}},paymentFailed:{summary:"Payment failed",value:{code:"ERR_PAYMENT_FAILED",params:{message:"Payment declined"}}}}}}},500:e["#/components/responses/InternalServerError"],504:e["#/components/responses/LambdaTimeout"]}}},"/preproduced/prepaid/new-customer":{post:{operationId:"linkPrepaidNewCustomer",summary:"Link Prepaid Card for New Customer",description:`Link prepaid card for a new customer.
`,tags:["Preproduced Card"],parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",required:["cardRefNum","embossedName","lastName","firstName","birthDate","email","mobilePhone","streetTitle","zip","nationalId","passport"],properties:{cardRefNum:{type:"string",description:"**Required.** Pre-produced card reference number",examples:["PREP001234"]},embossedName:{type:"string",description:"**Required.** Name to emboss on card",examples:["JOHN DOE"]},lastName:{type:"string",description:"**Required.** Customer last name",examples:["Doe"]},middleName:{type:"string",description:"Optional. Customer middle name",examples:["Michael"]},firstName:{type:"string",description:"**Required.** Customer first name",examples:["John"]},birthDate:{type:"string",pattern:"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$",description:"**Required.** Birth date (YYYY-MM-DD)",examples:["1990-05-15"]},email:{type:"string",description:"**Required.** Customer email",examples:["john.doe@example.com"]},mobilePhone:{type:"string",description:"**Required.** Customer mobile phone",examples:["+233501234567"]},streetTitle:{type:"string",description:"**Required.** Street address",examples:["123 Main Street"]},zip:{type:"string",description:"**Required.** Postal/ZIP code",examples:["00233"]},nationalId:{type:"string",description:"**Conditionally Required:** National ID (required if passport and identityId not provided)",examples:["GHA-123456789-0"]},passport:{type:"string",description:"**Conditionally Required:** Passport number (required if nationalId and identityId not provided)",examples:["G1234567"]},identityId:{type:"string",description:"**Conditionally Required:** Identity ID (required if nationalId and passport not provided)",examples:["ID-987654321"]}}},examples:{default:{value:{cardRefNum:"PREP001234",embossedName:"JOHN DOE",lastName:"Doe",firstName:"John",birthDate:"1990-05-15",email:"john.doe@example.com",mobilePhone:"+233501234567",streetTitle:"123 Main Street",zip:"00233",nationalId:"GHA-123456789-0"}}}}}},responses:{200:{description:"Prepaid card successfully issued to new customer",content:{"application/json":{schema:{type:"object",required:["code"],properties:{code:{type:"string",examples:["SUCCESS_REQUEST_PROCESSED"]}}},examples:{success:{summary:"Card issued successfully",value:{code:"SUCCESS_REQUEST_PROCESSED"}}}}}},400:e["#/components/responses/ValidationError"],401:e["#/components/responses/AuthenticationError"],409:{description:"Conflict ‚Äì customer or card issue",content:{"application/json":{schema:e["#/components/schemas/ConflictError"],examples:{customerExists:{summary:"Customer already exists",value:{code:"ERR_CUSTOMER_ALREADY_EXISTS",params:{message:"Customer already exists."}}},cardNotFound:{summary:"Card not found",value:{code:"ERR_READTOKEN_DECLINED",params:{message:"Card not found"}}}}}}},500:e["#/components/responses/InternalServerError"],504:e["#/components/responses/LambdaTimeout"]}}},"/preproduced/prepaid/existing-customer":{post:{operationId:"linkPrepaidExistingCustomer",summary:"Link Prepaid Card for Existing Customer",description:`Link prepaid card for an existing customer identified by their ID.
`,tags:["Preproduced Card"],parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",required:["cardRefNum","embossedName","nationalId","passport"],properties:{cardRefNum:{type:"string",description:"**Required.** Pre-produced card reference number",examples:["PREP001234"]},embossedName:{type:"string",description:"**Required.** Name to emboss on card",examples:["JOHN DOE"]},nationalId:{type:"string",description:"**Conditionally Required:** National ID (required if passport and identityId not provided)",examples:["GHA-123456789-0"]},passport:{type:"string",description:"**Conditionally Required:** Passport number (required if nationalId and identityId not provided)",examples:["G1234567"]},identityId:{type:"string",description:"**Conditionally Required:** Identity ID (required if nationalId and passport not provided)",examples:["ID-987654321"]}}},examples:{default:{value:{cardRefNum:"PREP001234",embossedName:"JOHN DOE",nationalId:"GHA-123456789-0"}}}}}},responses:{200:{description:"Prepaid card successfully issued to existing customer",content:{"application/json":{schema:{type:"object",required:["code"],properties:{code:{type:"string",examples:["SUCCESS_REQUEST_PROCESSED"]}}},examples:{success:{summary:"Card issued successfully",value:{code:"SUCCESS_REQUEST_PROCESSED"}}}}}},400:e["#/components/responses/ValidationError"],401:e["#/components/responses/AuthenticationError"],409:{description:"Conflict ‚Äì customer or card issue",content:{"application/json":{schema:e["#/components/schemas/ConflictError"],examples:{customerNotFound:{summary:"Customer not found",value:{code:"ERR_CUSTOMER_NOT_FOUND",params:{message:"Customer doesn't exist!"}}},cardNotFound:{summary:"Card not found",value:{code:"ERR_READTOKEN_DECLINED",params:{message:"Card not found"}}},cardAlreadyAssigned:{summary:"Card already assigned",value:{code:"ERR_CARD_ALREADY_ASSIGNED",params:{message:"This Card Is Already Assigned To A Customer!"}}},accountExists:{summary:"Account already exists",value:{code:"ERR_ACCOUNT_EXISTS",params:{message:"This Account Already Exists!"}}}}}}},500:e["#/components/responses/InternalServerError"],504:e["#/components/responses/LambdaTimeout"]}}},"/preproduced/prepaid/dummy-customer":{post:{operationId:"linkPrepaidDummyCustomer",summary:"Link Prepaid Card for Dummy Customer",description:`Link prepaid card for a dummy customer .
`,tags:["Preproduced Card"],parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",required:["cardRefNum","embossedName"],properties:{cardRefNum:{type:"string",description:"**Required.** Pre-produced card reference number",examples:["PREP001234"]},embossedName:{type:"string",description:"**Required.** Name to emboss on card",examples:["TEST CARD"]}}},examples:{default:{value:{cardRefNum:"PREP001234",embossedName:"TEST CARD"}}}}}},responses:{200:{description:"Prepaid card successfully issued to dummy customer",content:{"application/json":{schema:{type:"object",required:["code"],properties:{code:{type:"string",examples:["SUCCESS_REQUEST_PROCESSED"]}}},examples:{success:{summary:"Card issued successfully",value:{code:"SUCCESS_REQUEST_PROCESSED"}}}}}},400:e["#/components/responses/ValidationError"],401:e["#/components/responses/AuthenticationError"],409:{description:"Conflict ‚Äì card issue",content:{"application/json":{schema:e["#/components/schemas/ConflictError"],examples:{cardNotFound:{summary:"Card not found",value:{code:"ERR_READTOKEN_DECLINED",params:{message:"Card not found"}}},cardAlreadyAssigned:{summary:"Card already assigned",value:{code:"ERR_CARD_ALREADY_ASSIGNED",params:{message:"This Card Is Already Assigned To A Customer!"}}},accountExists:{summary:"Account already exists",value:{code:"ERR_ACCOUNT_EXISTS",params:{message:"This Account Already Exists!"}}}}}}},500:e["#/components/responses/InternalServerError"],504:e["#/components/responses/LambdaTimeout"]}}},"/preproduced/debit/new-account-new-customer":{post:{operationId:"linkDebitNewCustomer",summary:"Link Debit Card for New Customer with New Account",description:`Link debit card for a new customer with a new account.
`,tags:["Preproduced Card"],parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",required:["cardRefNum","embossedName","accountNum","lastName","firstName","birthDate","email","mobilePhone","streetTitle","zip","nationalId","passport"],properties:{cardRefNum:{type:"string",description:"**Required.** Pre-produced card reference number",examples:["PREP001234"]},embossedName:{type:"string",description:"**Required.** Name to emboss on card",examples:["JOHN DOE"]},accountNum:{type:"string",description:"**Required.** Account number for the debit account",examples:["1234567890"]},lastName:{type:"string",description:"**Required.** Customer last name",examples:["Doe"]},middleName:{type:"string",description:"Optional. Customer middle name",examples:["Michael"]},firstName:{type:"string",description:"**Required.** Customer first name",examples:["John"]},birthDate:{type:"string",format:"date",description:"**Required.** Customer birth date (YYYY-MM-DD)",examples:["1990-01-15"]},email:{type:"string",format:"email",description:"**Required.** Customer email",examples:["john.doe@example.com"]},mobilePhone:{type:"string",description:"**Required.** Customer mobile phone",examples:["+1234567890"]},streetTitle:{type:"string",description:"**Required.** Street address",examples:["123 Main St"]},zip:{type:"string",description:"**Required.** Postal code",examples:["12345"]},nationalId:{type:"string",description:"**Conditionally Required:** National ID (required if passport and identityId not provided)",examples:["GHA-123456789-0"]},passport:{type:"string",description:"**Conditionally Required:** Passport number (required if nationalId and identityId not provided)",examples:["G1234567"]},identityId:{type:"string",description:"**Conditionally Required:** Identity ID (required if nationalId and passport not provided)",examples:["ID-987654321"]}}},examples:{default:{value:{cardRefNum:"PREP001234",embossedName:"JOHN DOE",accountNum:"1234567890",lastName:"Doe",firstName:"John",birthDate:"1990-01-15",email:"john.doe@example.com",mobilePhone:"+1234567890",streetTitle:"123 Main St",zip:"12345",nationalId:"GHA-123456789-0"}}}}}},responses:{200:{description:"Debit card successfully issued to new customer",content:{"application/json":{schema:{type:"object",required:["code"],properties:{code:{type:"string",examples:["SUCCESS_REQUEST_PROCESSED"]}}},examples:{success:{summary:"Card issued successfully",value:{code:"SUCCESS_REQUEST_PROCESSED"}}}}}},400:e["#/components/responses/ValidationError"],401:e["#/components/responses/AuthenticationError"],409:{description:"Conflict ‚Äì customer or card issue",content:{"application/json":{schema:e["#/components/schemas/ConflictError"],examples:{customerExists:{summary:"Customer already exists",value:{code:"ERR_CUSTOMER_ALREADY_EXISTS",params:{message:"Customer already exists."}}},cardNotFound:{summary:"Card not found",value:{code:"ERR_READTOKEN_DECLINED",params:{message:"Card not found"}}},cardAlreadyAssigned:{summary:"Card already assigned",value:{code:"ERR_CARD_ALREADY_ASSIGNED",params:{message:"This Card Is Already Assigned To A Customer!"}}},unsupportedProduct:{summary:"Unsupported card product",value:{code:"ERR_UNSUPPORTED_PRODUCTID",params:{message:"Unsupported or invalid Card ProductId!"}}}}}}},500:e["#/components/responses/InternalServerError"],504:e["#/components/responses/LambdaTimeout"]}}},"/preproduced/debit/new-account-existing-customer":{post:{operationId:"linkDebitExistingCustomer",summary:"Link Debit Card for Existing Customer with New Account",description:`Link debit card for an existing customer with a new account.
`,tags:["Preproduced Card"],parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",required:["cardRefNum","embossedName","accountNum","nationalId","passport"],properties:{cardRefNum:{type:"string",description:"**Required.** Pre-produced card reference number",examples:["PREP001234"]},embossedName:{type:"string",description:"**Required.** Name to emboss on card",examples:["JOHN DOE"]},accountNum:{type:"string",description:"**Required.** Account number for the debit account",examples:["1234567890"]},nationalId:{type:"string",description:"**Conditionally Required:** National ID (required if passport and identityId not provided)",examples:["GHA-123456789-0"]},passport:{type:"string",description:"**Conditionally Required:** Passport number (required if nationalId and identityId not provided)",examples:["G1234567"]},identityId:{type:"string",description:"**Conditionally Required:** Identity ID (required if nationalId and passport not provided)",examples:["ID-987654321"]}}},examples:{default:{value:{cardRefNum:"PREP001234",embossedName:"JOHN DOE",accountNum:"1234567890",nationalId:"GHA-123456789-0"}}}}}},responses:{200:{description:"Debit card successfully issued to existing customer",content:{"application/json":{schema:{type:"object",required:["code"],properties:{code:{type:"string",examples:["SUCCESS_REQUEST_PROCESSED"]}}},examples:{success:{summary:"Card issued successfully",value:{code:"SUCCESS_REQUEST_PROCESSED"}}}}}},400:e["#/components/responses/ValidationError"],401:e["#/components/responses/AuthenticationError"],409:{description:"Conflict ‚Äì customer or card issue",content:{"application/json":{schema:e["#/components/schemas/ConflictError"],examples:{customerNotFound:{summary:"Customer not found",value:{code:"ERR_CUSTOMER_NOT_FOUND",params:{message:"Customer doesn't exist!"}}},cardNotFound:{summary:"Card not found",value:{code:"ERR_READTOKEN_DECLINED",params:{message:"Card not found"}}},cardAlreadyAssigned:{summary:"Card already assigned",value:{code:"ERR_CARD_ALREADY_ASSIGNED",params:{message:"This Card Is Already Assigned To A Customer!"}}},accountExists:{summary:"Account already exists",value:{code:"ERR_ACCOUNT_EXISTS",params:{message:"This Account Already Exists!"}}},unsupportedProduct:{summary:"Unsupported card product",value:{code:"ERR_UNSUPPORTED_PRODUCTID",params:{message:"Unsupported or invalid Card ProductId!"}}}}}}},500:e["#/components/responses/InternalServerError"],504:e["#/components/responses/LambdaTimeout"]}}},"/preproduced/debit/existing-account-existing-customer":{post:{operationId:"linkDebitExistingAccountExistingCustomer",summary:"Link Debit Card for Existing Customer with Existing Account",description:`Link a pre-produced debit card to an existing customer's existing account.
`,tags:["Preproduced Card"],parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",required:["cardRefNum","embossedName","accountNum","nationalId","passport"],properties:{cardRefNum:{type:"string",description:"**Required.** Pre-produced card reference number",examples:["PREP001234"]},embossedName:{type:"string",description:"**Required.** Name to emboss on card",examples:["JOHN DOE"]},accountNum:{type:"string",description:"**Required.** Existing debit account number to link",examples:["1234567890"]},nationalId:{type:"string",description:"**Conditionally Required:** National ID (required if passport and identityId not provided)",examples:["GHA-123456789-0"]},passport:{type:"string",description:"**Conditionally Required:** Passport number (required if nationalId and identityId not provided)",examples:["G1234567"]},identityId:{type:"string",description:"**Conditionally Required:** Identity ID (required if nationalId and passport not provided)",examples:["ID-987654321"]}}},examples:{default:{value:{cardRefNum:"PREP001234",embossedName:"JOHN DOE",accountNum:"1234567890",nationalId:"GHA-123456789-0"}}}}}},responses:{200:{description:"Debit card successfully linked to existing account and customer",content:{"application/json":{schema:{type:"object",required:["code"],properties:{code:{type:"string",examples:["SUCCESS_REQUEST_PROCESSED"]}}},examples:{success:{summary:"Card linked successfully",value:{code:"SUCCESS_REQUEST_PROCESSED"}}}}}},400:e["#/components/responses/ValidationError"],401:e["#/components/responses/AuthenticationError"],409:{description:"Conflict ‚Äì customer or card issue",content:{"application/json":{schema:e["#/components/schemas/ConflictError"],examples:{customerNotFound:{summary:"Customer not found",value:{code:"ERR_CUSTOMER_NOT_FOUND",params:{message:"Customer doesn't exist!"}}},accountNotFound:{summary:"Account not found",value:{code:"ERR_ACCOUNT_NOT_FOUND",params:{message:"Account number does not exist in the system"}}},cardNotFound:{summary:"Card not found",value:{code:"ERR_READTOKEN_DECLINED",params:{message:"Card not found"}}},cardAlreadyAssigned:{summary:"Card already assigned",value:{code:"ERR_CARD_ALREADY_ASSIGNED",params:{message:"This Card Is Already Assigned To A Customer!"}}},unsupportedProduct:{summary:"Unsupported card product",value:{code:"ERR_UNSUPPORTED_PRODUCTID",params:{message:"Unsupported or invalid Card ProductId!"}}}}}}},500:e["#/components/responses/InternalServerError"],504:e["#/components/responses/LambdaTimeout"]}}},"/cards/convert-virtual-to-physical":{post:{operationId:"convertVirtualToPhysical",summary:"Convert Virtual Card to Physical",description:`Convert a virtual card to physical by updating its lifecycle phase to "ordered" status, ready for printing and delivery.

**Requirements:**
- Card must be in active status
- Card must be virtual type
- Card must be eligible for physical conversion

**Process:**
1. Validate card existence
2. Check card is active
3. Verify card is virtual type
4. Update lifecycle phase to "ordered"
5. Queue card for physical production
`,tags:["Card Management"],parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",required:["cardId"],properties:{cardId:{type:"string",pattern:"^[0-9]+$",description:"**Required.** Card ID (numeric only)",examples:["4092"]}}},examples:{default:{value:{cardId:"4092"}}}}}},responses:{200:{description:"Card successfully converted to physical",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["SUCCESS_VIRTUAL_TO_ORDERED"]},params:{type:"object",required:["message","cardId"],properties:{message:{type:"string",description:"Success message",examples:["Card phase changed from virtual to ordered successfully"]},cardId:{type:"string",description:"Card ID",examples:["4092"]}}}}},examples:{successResponse:{summary:"Conversion successful",value:{code:"SUCCESS_VIRTUAL_TO_ORDERED",params:{message:"Card phase changed from virtual to ordered successfully",cardId:"4092"}}}}}}},400:{description:"Bad request ‚Äì validation failed",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_VALIDATION_FAILED"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["Missing required field: cardId"]}}}}},examples:{missingCardId:{summary:"Missing required field",value:{code:"ERR_VALIDATION_FAILED",params:{message:"Missing required field: cardId"}}},invalidCardId:{summary:"Invalid card ID format",value:{code:"ERR_VALIDATION_FAILED",params:{field:"cardId",message:"Card ID must contain only numbers"}}}}}}},401:e["#/components/responses/AuthenticationError"],409:{description:"Conflict ‚Äì conversion declined",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_CARD_NOT_ACTIVE"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["Card is not active. Current status: Unknown"]}}}}},examples:{cardNotActive:{summary:"Card not active",value:{code:"ERR_CARD_NOT_ACTIVE",params:{message:"Card is not active. Current status: Unknown"}}},cardNotFound:{summary:"Card not found",value:{code:"ERR_CARD_NOT_FOUND",params:{message:"Card not found"}}},cardNotVirtual:{summary:"Card is not virtual",value:{code:"ERR_CARD_NOT_VIRTUAL",params:{message:"Card is not virtual type"}}},alreadyOrdered:{summary:"Card already ordered",value:{code:"ERR_ALREADY_PHYSICAL",params:{message:"Card is already in physical or ordered status"}}}}}}},500:e["#/components/responses/InternalServerError"],504:e["#/components/responses/LambdaTimeout"]}}},"/cards/card-details/{card_Id}":{get:{operationId:"getCardDetails",tags:["Card Management"],summary:"Show Card Details by Card ID",description:`Retrieve comprehensive card information using the card ID.
`,parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"],{name:"card_Id",in:"path",required:!0,description:"Card ID to retrieve details for",schema:{type:"string",examples:["12345"]}}],responses:{200:{description:"Card details successfully retrieved",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["SUCCESS_CARD_DETAILS_RETRIEVED"]},params:{type:"object",required:["maskedPan","status","expiryDate","availableBalance","currency"],properties:{maskedPan:{type:"string",description:"Masked Primary Account Number",examples:["123456******1234"]},status:{type:"string",description:"Current card status",examples:["Active"]},expiryDate:{type:"string",format:"date",description:"Card expiry date",examples:["2025-12-31"]},availableBalance:{type:"string",description:"Available balance on the card",examples:["1500.00"]},currency:{type:"string",description:"Currency code or symbol",examples:["USD"]}}}}},examples:{successResponse:{summary:"Successful card details retrieval",value:{code:"SUCCESS_CARD_DETAILS_RETRIEVED",params:{maskedPan:"123456******1234",status:"Active",expiryDate:"2025-12-31",availableBalance:"1500.00",currency:"USD"}}}}}}},400:{description:"Bad request ‚Äì validation failed",content:{"application/json":{schema:e["#/components/schemas/ValidationError"],examples:{badRequestExample:{summary:"Missing required field",value:{code:"ERR_VALIDATION_FAILED",params:{message:"Missing required field: cardId"}}}}}}},401:e["#/components/responses/AuthenticationError"],409:{description:"Conflict ‚Äì card not found",content:{"application/json":{schema:e["#/components/schemas/ConflictError"],examples:{cardNotFound:{summary:"Card not found",value:{code:"ERR_CARD_NOT_FOUND",params:{message:"Card not found"}}}}}}},500:e["#/components/responses/InternalServerError"],504:e["#/components/responses/LambdaTimeout"]}}},"/customers/list-of-cards":{post:{operationId:"listCustomerCards",tags:["Card Management"],summary:"List All Customer Cards",description:`Retrieve all cards issued to a customer using their identification document.

**Search By:**
- Passport number, OR
- National ID number, OR
- ID number
`,parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",required:["passport","nationalId","identityId"],properties:{passport:{type:"string",description:"**Conditionally Required:** One of nationalId, passport, or identityId is required. Customer's passport number",examples:["76238310075"]},nationalId:{type:"string",description:"**Conditionally Required:** One of nationalId, passport, or identityId is required. Customer's national ID",examples:["1234567890"]},identityId:{type:"string",description:"**Conditionally Required:** One of nationalId, passport, or identityId is required. External ID number provided by the bank (use this if customer is not working with nationalId or passport)",examples:["ID123456"]}}},examples:{withPassport:{summary:"Search by Passport",value:{passport:"76238310075"}},withNationalId:{summary:"Search by National ID",value:{nationalId:"1234567890"}},withId:{summary:"Search by ID",value:{identityId:"ID123456"}}}}}},responses:{200:{description:"Cards successfully retrieved",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["SUCCESS_CARDS_RETRIEVED"]},params:{type:"object",required:["totalCards","cards"],properties:{totalCards:{type:"integer",description:"Total number of cards found",examples:[2]},cards:{type:"array",items:{type:"object",properties:{cardId:{type:"string",description:"Card ID",examples:["12345"]},maskedPan:{type:"string",description:"Masked card PAN",examples:["123456******1234"]},productName:{type:"string",description:"Card product name",examples:["Visa Debit Card"]},status:{type:"string",description:"Card status",examples:["Active"]},expiryDate:{type:"string",format:"date",description:"Card expiry date",examples:["2025-12-31"]}}}}}}}},examples:{successResponse:{summary:"Successful cards retrieval",value:{code:"SUCCESS_CARDS_RETRIEVED",params:{totalCards:2,cards:[{cardId:"12345",maskedPan:"123456******1234",productName:"Visa Debit Card",status:"Active",expiryDate:"2025-12-31"},{cardId:"67890",maskedPan:"123456******5678",productName:"Mastercard Debit",status:"Deactivated",expiryDate:"2026-06-30"}]}}}}}}},400:{description:"Bad request ‚Äì validation failed",content:{"application/json":{schema:e["#/components/schemas/ValidationError"],examples:{badRequestExample:{summary:"Missing identification document",value:{code:"ERR_VALIDATION_FAILED",params:{message:"Either passport or nationalId is required"}}}}}}},401:e["#/components/responses/AuthenticationError"],409:{description:"Customer not found",content:{"application/json":{schema:e["#/components/schemas/ConflictError"],examples:{customerNotFound:{summary:"Customer not found",value:{code:"ERR_CUSTOMER_NOT_FOUND",params:{message:"Customer doesn't exist"}}}}}}},500:e["#/components/responses/InternalServerError"],504:e["#/components/responses/LambdaTimeout"]}}},"/cards/delete-card":{post:{operationId:"deleteCard",summary:"Delete Card",description:`Permanently delete a card using either its card ID or external RID.

**Warning:** This operation is irreversible. The card will be permanently removed from the system.
`,tags:["Card Management"],parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{content:{"application/json":{schema:{type:"object",required:["cardId","extRid"],properties:{cardId:{type:"string",description:"**Conditionally Required:** One of cardId or extRid is required. Card ID to delete",examples:["3255"]},extRid:{type:"string",description:"**Conditionally Required:** One of cardId or extRid is required. External RID to delete card",examples:["TestVenCorporate1"]}}},examples:{default:{value:{cardId:"3255"}}}}}},responses:{200:{description:"Card successfully deleted",content:{"application/json":{schema:{type:"object",required:["code"],properties:{code:{type:"string",examples:["SUCCESS_CARD_DELETED"]}}},examples:{successResponse:{summary:"Card deleted successfully",value:{code:"SUCCESS_CARD_DELETED"}}}}}},400:{description:"Bad request ‚Äì validation failed",content:{"application/json":{schema:e["#/components/schemas/ValidationError"],examples:{badRequestExample:{summary:"Missing required field",value:{code:"ERR_VALIDATION_FAILED",params:{message:"One of the following fields is required: cardId, extRid"}}}}}}},401:e["#/components/responses/AuthenticationError"],409:{description:"Conflict ‚Äì card not found or cannot be deleted",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_CARD_NOT_FOUND"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["Card not found"]}}}}},examples:{cardNotFound:{summary:"Card not found",value:{code:"ERR_CARD_NOT_FOUND",params:{message:"Card #3255 not found"}}}}}}},500:e["#/components/responses/InternalServerError"],504:e["#/components/responses/LambdaTimeout"]}}},"/cards/list-of-transactions":{post:{operationId:"getTransactionHistory",tags:["Transactions"],summary:"Show Transactions History",description:`Retrieve detailed transaction history for a card within a specified date range.

**Date Range:** Specify startDate and endDate to filter transactions
`,parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",required:["cardId","startDate","endDate","transactionCount"],properties:{cardId:{type:"string",description:"**Required.** Card ID",examples:["12345"]},startDate:{type:"string",format:"date",pattern:"^\\d{4}-\\d{2}-\\d{2}$",description:"**Required.** Start date in YYYY-MM-DD format",examples:["2025-01-01"]},endDate:{type:"string",format:"date",pattern:"^\\d{4}-\\d{2}-\\d{2}$",description:"**Required.** End date in YYYY-MM-DD format",examples:["2025-01-31"]},transactionCount:{type:"integer",minimum:1,maximum:100,description:"**Optional.** Maximum number of transactions to return (1-100)",examples:[2]}}},examples:{default:{value:{cardId:"12345",startDate:"2025-01-01",endDate:"2025-01-31",transactionCount:2}}}}}},responses:{200:{description:"Transactions successfully retrieved",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["SUCCESS_TRANSACTIONS_RETRIEVED"]},params:{type:"object",required:["cardId","startDate","endDate","totalTransactions","transactions"],properties:{cardId:{type:"string",description:"Card ID",examples:["3280"]},startDate:{type:"string",format:"date",description:"Start date of query",examples:["2025-07-01"]},endDate:{type:"string",format:"date",description:"End date of query",examples:["2025-10-02"]},totalTransactions:{type:"integer",description:"Total number of transactions",examples:[31]},transactions:{type:"array",items:{type:"object",required:["transactionId","transactionKind","transactionLabel","transactionType","transactionStatus","amount","currency","date","timestamp","terminalOwnerTitle","terminalType"],properties:{transactionId:{type:"string",description:"Unique transaction identifier",examples:["251002511421445346"]},transactionKind:{type:"string",description:"Kind of transaction",examples:["Goods"]},transactionLabel:{type:"string",description:"Transaction label",examples:["Purchase"]},transactionType:{type:"string",enum:["Debit","Credit","Neutral","Unknown"],description:"Transaction type based on TranSignum: -1 = Debit, 1 = Credit, 0 = Neutral",examples:["Debit"]},transactionStatus:{type:"string",enum:["Hold","Presentment"],description:"Settlement status: Hold (TranPostings empty) or Presentment (TranPostings has data)",examples:["Presentment"]},amount:{type:"number",description:"Transaction amount",examples:[45]},currency:{type:"string",description:"Currency code",examples:["USD"]},date:{type:"string",format:"date",description:"Transaction date",examples:["2025-10-02"]},timestamp:{type:"string",format:"date-time",description:"Transaction timestamp",examples:["2025-10-02T14:12:22.000"]},terminalOwnerTitle:{type:"string",description:"Terminal owner/acquirer name",examples:["ACQUIRER NAME"]},terminalType:{type:"string",description:"Type of terminal",examples:["Pos"]},posting:{type:"object",description:"Posting details with RegRole='Current' (only present when transactionStatus is Presentment)",properties:{sign:{type:"string",enum:["Debit","Credit","Unknown"],description:"Posting type: Debit (money out) or Credit (money in)",examples:["Debit"]},amount:{type:"number",description:"Posting amount",examples:[409.2]},fees:{type:"number",description:"Sum of transaction fees from postings",examples:[15]},currency:{type:"string",description:"Currency title (e.g., Egyptian Pound, US Dollar) retrieved from account contract",examples:["Egyptian Pound"]}}},hold:{type:"object",description:"Hold details from TranHoldActions (only present when transactionStatus is Hold)",properties:{sign:{type:"string",enum:["Debit","Credit","Unknown"],description:"Hold type based on HoldSign from Auth action: -1 = Debit, 1 = Credit",examples:["Debit"]},amount:{type:"number",description:"Authorization hold amount (AmtDelta from Auth action)",examples:[162.56]},fees:{type:"number",description:"Authorization fee amount (AmtDelta from AuthFee action, if present)",examples:[15]},currency:{type:"string",description:"Currency title (e.g., Egyptian Pound, US Dollar) retrieved from account contract",examples:["Egyptian Pound"]}}}}}}}}}},examples:{successResponse:{summary:"Successful transactions retrieval",value:{code:"SUCCESS_TRANSACTIONS_RETRIEVED",params:{cardId:"3280",startDate:"2025-07-01",endDate:"2025-10-02",totalTransactions:2,transactions:[{transactionId:"251002511421445346",transactionKind:"Goods",transactionLabel:"Purchase",transactionType:"Debit",transactionStatus:"Presentment",amount:45,currency:"USD",date:"2025-10-02",timestamp:"2025-10-02T14:12:22.000",terminalOwnerTitle:"ACQUIRER NAME",terminalType:"Pos",posting:{sign:"Debit",amount:409.2,fees:15,currency:"Egyptian Pound"}},{transactionId:"250925476227641819",transactionKind:"Goods",transactionLabel:"Purchase",transactionType:"Debit",transactionStatus:"Hold",amount:21,currency:"USD",date:"2025-09-25",timestamp:"2025-09-25T13:13:42.000",terminalOwnerTitle:"ACQUIRER NAME",terminalType:"Pos",hold:{sign:"Debit",amount:162.56,fees:15,currency:"Egyptian Pound"}}]}}}}}}},400:{description:"Bad request ‚Äì validation failed",content:{"application/json":{schema:e["#/components/schemas/ValidationError"],examples:{badRequestExample:{summary:"Invalid date format",value:{code:"ERR_VALIDATION_FAILED",params:{message:"Invalid startDate format"}}}}}}},401:e["#/components/responses/AuthenticationError"],409:{description:"Conflict ‚Äì card not found",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_READTOKEN_DECLINED"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["Card not found"]}}}}},examples:{conflictExample:{summary:"Card not found",value:{code:"ERR_READTOKEN_DECLINED",params:{message:"Card not found"}}}}}}},500:e["#/components/responses/InternalServerError"],504:e["#/components/responses/LambdaTimeout"]}}},"/cards/get-pan/{card_id}":{get:{operationId:"getCardPan",summary:"Show PAN for Card",description:`Retrieve the unmasked PAN (Primary Account Number) for a card using its card ID.

**Note:** This operation returns the full, unmasked PAN. Handle with appropriate security measures.
`,tags:["Card Management"],parameters:[e["#/components/parameters/apiKey"],{name:"card_id",in:"path",required:!0,schema:{type:"string"},description:"**Required.** Card ID",examples:{default:{value:"12345"}}}],responses:{200:{description:"PAN successfully retrieved",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["SUCCESS_PAN_RETRIEVED"]},params:{type:"object",required:["pan"],properties:{pan:{type:"string",description:"Primary Account Number (unmasked)",examples:["4373580001009606"]}}}}},examples:{successResponse:{summary:"PAN retrieved successfully",value:{code:"SUCCESS_PAN_RETRIEVED",params:{pan:"4373580001009606"}}}}}}},400:{description:"Bad request ‚Äì validation failed",content:{"application/json":{schema:e["#/components/schemas/ValidationError"],examples:{badRequestExample:{summary:"Missing required field",value:{code:"ERR_VALIDATION_FAILED",params:{message:"Missing required field: cardId"}}}}}}},401:e["#/components/responses/AuthenticationError"],409:{description:"Conflict ‚Äì request declined",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_CARD_NOT_FOUND"]},params:{type:"object",required:["exists","message"],properties:{exists:{type:"boolean",description:"Whether the card exists in the system",examples:[!1]},message:{type:"string",examples:["Card not found"]}}}}},examples:{cardNotFound:{summary:"Card not found",value:{code:"ERR_CARD_NOT_FOUND",params:{exists:!1,message:"Card"}}},panNotAvailable:{summary:"PAN not available",value:{code:"ERR_PAN_NOT_AVAILABLE",params:{message:"PAN is not available for this card"}}}}}}},500:e["#/components/responses/InternalServerError"],504:e["#/components/responses/LambdaTimeout"]}}},"/get-cvv2":{post:{operationId:"getCardCvv2",summary:"Show CVV2 for Card",description:`Retrieve the CVV2 (Card Verification Value) for a card using its PAN (Primary Account Number).

**PCI DSS Compliance:**
- This endpoint uses POST method to prevent sensitive card data (PAN) from appearing in URL logs
**Note:** This operation calculates and returns the CVV2 value for the specified card.
`,tags:["Card Management"],parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",required:["pan"],properties:{pan:{type:"string",pattern:"^[0-9]{13,19}$",description:"**Required.** Primary Account Number (13-19 digits)",examples:["4373580001009606"]}}},examples:{default:{value:{pan:"4373580001009606"}}}}}},responses:{200:{description:"CVV2 successfully retrieved",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["SUCCESS_CVV2_RETRIEVED"]},params:{type:"object",required:["cvv2"],properties:{cvv2:{type:"string",description:"Card Verification Value 2",examples:["123"]}}}}},examples:{successResponse:{summary:"CVV2 retrieved successfully",value:{code:"SUCCESS_CVV2_RETRIEVED",params:{cvv2:"123"}}}}}}},400:{description:"Bad request ‚Äì validation failed",content:{"application/json":{schema:e["#/components/schemas/ValidationError"],examples:{invalidPanFormat:{summary:"Invalid PAN format",value:{code:"ERR_VALIDATION_FAILED",params:{message:"Invalid pan format"}}},missingPan:{summary:"Missing PAN parameter",value:{code:"ERR_MISSING_PARAMETER",params:{message:"Missing required parameter: pan"}}},emptyBody:{summary:"Empty request body",value:{code:"ERR_BODY_EMPTY",params:{message:"Request body is required"}}},invalidJson:{summary:"Invalid JSON format",value:{code:"ERR_INVALID_JSON",params:{message:"Invalid JSON format in request body"}}}}}}},401:e["#/components/responses/AuthenticationError"],405:{description:"Method Not Allowed ‚Äì Only POST is supported",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_METHOD_NOT_ALLOWED"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["Only POST method is allowed"]}}}}},examples:{methodNotAllowed:{summary:"Method not allowed",value:{code:"ERR_METHOD_NOT_ALLOWED",params:{message:"Only POST method is allowed"}}}}}}},409:{description:"Conflict ‚Äì request declined",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_CARD_NOT_FOUND"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["Card not found"]}}}}},examples:{cardNotFound:{summary:"Card not found",value:{code:"ERR_CARD_NOT_FOUND",params:{message:"Card with PAN ending 9606 not found"}}},cvv2NotAvailable:{summary:"CVV2 not available",value:{code:"ERR_CVV2_NOT_AVAILABLE",params:{message:"CVV2 is not available for this card"}}}}}}},500:e["#/components/responses/InternalServerError"],504:e["#/components/responses/LambdaTimeout"]}}},"/cards/create-prepaid":{post:{operationId:"createPrepaidCard",tags:["Card Management"],summary:"Create Virtual Prepaid Card",description:`Create a virtual prepaid card for an **existing customer only**.

## ‚ö†Ô∏è Important: Customer Must Exist First

**This API only works for existing customers.** If the customer doesn't exist, you will receive an error.

**Workflow:**

1. **Check if Customer Exists** using \`POST /customers/search\`
   - Search by nationalId, passport, or identityId
   - If customer **does NOT exist** ‚Üí Use \`POST /customers/create\` to create the customer first
   - If customer **exists** ‚Üí Proceed to step 2

2. **Create Prepaid Card** using this API (\`POST /cards/create-prepaid\`)
   - Provide the customer's document ID (nationalId, passport, or identityId)
   - Optionally enable auto-activation and notifications

---

**Process Flow:**
1. **Customer Verification**: Check if customer exists using document ID
2. **Card Issuance**: Create issuing and financial contracts, issue virtual card
3. **Card Activation** (Optional): Set \`autoActivate: true\` to automatically activate the card (default: false)
4. **Notifications** (Optional): Set \`notificationStatus: "enabled"\` to enable SMS/Email notifications

**Note:** By default, card is NOT automatically activated unless \`autoActivate\` is set to \`true\`
`,parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",required:["nationalId","passport","identityId"],properties:{nationalId:{type:"string",description:"**Conditionally Required:** National ID (required if passport and identityId not provided)",examples:["1234567890"]},passport:{type:"string",description:"**Conditionally Required:** Passport number (required if nationalId and identityId not provided)",examples:["AB1234567"]},identityId:{type:"string",description:"**Conditionally Required:** Identity ID (required if nationalId and passport not provided)",examples:["ID123456"]},notificationStatus:{type:"string",enum:["enabled","disabled"],description:"**Optional.** Enable or disable notifications (default: disabled)",examples:["enabled"]},autoActivate:{type:"boolean",description:"**Optional.** Automatically activate card after creation (default: false)",default:!1,examples:[!1]}}},examples:{withNationalId:{summary:"Create card with National ID",value:{nationalId:"1234567890",notificationStatus:"enabled",autoActivate:!1}},withPassport:{summary:"Create card with Passport",value:{passport:"AB1234567",autoActivate:!0}}}}}},responses:{200:{description:"Card successfully created (and activated if autoActivate was true)",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["SUCCESS_REQUEST_PROCESSED"]},params:{type:"object",required:["personId","cardId","cardDetails","notificationStatus"],properties:{personId:{type:"string",description:"Customer person ID",examples:["PERS12345"]},cardId:{type:"string",description:"Card ID",examples:["12345"]},cardDetails:{type:"object",required:["pan","expirationDate","cvv2"],properties:{pan:{type:"string",description:"Primary Account Number",examples:["1234567890123456"]},expirationDate:{type:"string",format:"date",description:"Card expiration date in YYYY-MM-DD format",examples:["2027-12-31"]},cvv2:{type:"string",description:"Card verification value",examples:["123"]}}},notificationStatus:{type:"boolean",description:"Whether notifications are enabled",examples:[!0]},notificationStatusMessage:{type:"string",description:"Notification status message (only if already existed)",examples:["Already Enabled"]}}}}},examples:{successResponse:{summary:"Card created successfully",value:{code:"SUCCESS_REQUEST_PROCESSED",params:{personId:"PERS12345",cardId:"12345",cardDetails:{pan:"1234567890123456",expirationDate:"2027-12-31",cvv2:"123"},notificationStatus:!0}}}}}}},400:{description:"Bad request ‚Äì validation failed",content:{"application/json":{schema:e["#/components/schemas/ValidationError"],examples:{badRequestExample:{summary:"Validation failed",value:{code:"ERR_VALIDATION_FAILED",params:{message:"Invalid Email format"}}}}}}},401:e["#/components/responses/AuthenticationError"],409:{description:"Conflict ‚Äì customer not found or operation declined",content:{"application/json":{schema:e["#/components/schemas/ConflictError"],examples:{customerNotFound:{summary:"Customer not found",value:{code:"ERR_CUSTOMER_NOT_FOUND",params:{message:"Customer not found. Please create the customer first using the /customers/create API."}}},existingGroupDeclined:{summary:"Card creation declined",value:{code:"ERR_EXISTING_GROUP_DECLINED",params:{message:"Token is not found"}}},activateCardDeclined:{summary:"Card activation declined",value:{code:"ERR_ACTIVATE_CARD_DECLINED",params:{message:"Card activation declined"}}},notificationServiceUnavailable:{summary:"Notification service unavailable",value:{code:"ERR_NOTIFICATION_SERVICE_UNAVAILABLE",params:{message:"Notification service is not available for your account at this time. Please contact support."}}}}}}},500:{description:"Internal server error",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_INTERNAL_SERVER_ERROR"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["An unexpected error occurred. Please try again later."]}}}}},examples:{internalServerError:{summary:"Internal server error",value:{code:"ERR_INTERNAL_SERVER_ERROR",params:{message:"An unexpected error occurred. Please try again later."}}}}}}},504:e["#/components/responses/LambdaTimeout"]}}},"/cards/create-debit":{post:{operationId:"createDebitCard",tags:["Card Management"],summary:"Create Debit Card",description:`Create a debit card for an **existing customer only**.

## ‚ö†Ô∏è Important: Customer Must Exist First

**This API only works for existing customers.** If the customer doesn't exist, you will receive an error.

**Workflow:**

1. **Check if Customer Exists** using \`POST /customers/search\`
   - Search by nationalId, passport, or identityId
   - If customer **does NOT exist** ‚Üí Use \`POST /customers/create\` to create the customer first
   - If customer **exists** ‚Üí Proceed to step 2

2. **Create Debit Card** using this API (\`POST /cards/create-debit\`)
   - Provide the customer's ID (nationalId, passport, or identityId)
   - Provide the account number
   - Optionally enable notifications
   - Optionally activate the card

---
`,parameters:[e["#/components/parameters/apiKey"],e["#/components/parameters/contentType"]],requestBody:{required:!0,content:{"application/json":{schema:{type:"object",required:["accountNumber","nationalId","passport","identityId"],properties:{nationalId:{type:"string",description:"**Conditionally Required:** National ID (required if passport and identityId not provided)",examples:["1234567890"]},passport:{type:"string",description:"**Conditionally Required:** Passport number (required if nationalId and identityId not provided)",examples:["AB1234567"]},identityId:{type:"string",description:"**Conditionally Required:** Identity ID (required if nationalId and passport not provided)",examples:["ID123456"]},accountNumber:{type:"string",description:"**Required.** External account number (DHI reference) to link with the financial contract",examples:["DHI123456789"]},notificationStatus:{type:"string",enum:["enabled","disabled"],description:"**Optional.** Enable or disable notifications (default: disabled)",examples:["enabled"]},autoActivate:{type:"boolean",description:"**Optional.** Automatically activate card after creation (default: false)",default:!1,examples:[!1]}}},examples:{withNationalId:{summary:"Create debit card with National ID",value:{nationalId:"1234567890",accountNumber:"DHI123456789",notificationStatus:"enabled",autoActivate:!1}},withPassport:{summary:"Create debit card with Passport and auto-activation",value:{passport:"AB1234567",accountNumber:"DHI987654321",autoActivate:!0}}}}}},responses:{200:{description:"Debit card successfully created (and activated if autoActivate was true)",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["SUCCESS_REQUEST_PROCESSED"]},params:{type:"object",required:["personId","cardId","cardDetails","notificationStatus"],properties:{personId:{type:"string",description:"Customer person ID",examples:["PERS12345"]},cardId:{type:"string",description:"Card ID",examples:["12345"]},cardDetails:{type:"object",required:["pan","expirationDate"],properties:{pan:{type:"string",description:"Primary Account Number",examples:["526916******0106"]},expirationDate:{type:"string",format:"date",description:"Card expiration date in YYYY-MM-DD format",examples:["2027-12-31"]}}},notificationStatus:{type:"boolean",description:"Whether notifications are enabled",examples:[!0]},notificationStatusMessage:{type:"string",description:"Notification status message (only if already existed)",examples:["Already Enabled"]}}}}},examples:{successResponse:{summary:"Debit card created successfully",value:{code:"SUCCESS_REQUEST_PROCESSED",params:{personId:"PERS12345",cardId:"12345",cardDetails:{pan:"526916******0106",expirationDate:"2027-12-31"},notificationStatus:!0}}}}}}},400:{description:"Bad request ‚Äì validation failed",content:{"application/json":{schema:e["#/components/schemas/ValidationError"],examples:{missingExternalAccount:{summary:"Missing external account number",value:{code:"ERR_VALIDATION_FAILED",params:{message:"Missing required field: accountNumber"}}},missingDocumentId:{summary:"Missing document ID",value:{code:"ERR_VALIDATION_FAILED",params:{message:"One of the following fields is required: nationalId, passport, identityId"}}}}}}},401:e["#/components/responses/AuthenticationError"],409:{description:"Conflict ‚Äì customer not found or operation declined",content:{"application/json":{schema:e["#/components/schemas/ConflictError"],examples:{customerNotFound:{summary:"Customer not found",value:{code:"ERR_CUSTOMER_NOT_FOUND",params:{message:"Customer not found. Please create the customer first using the /customers/create API."}}},cardCreationDeclined:{summary:"Card creation declined",value:{code:"ERR_CARD_CREATION_DECLINED",params:{message:"Card creation declined"}}},activateCardDeclined:{summary:"Card activation declined",value:{code:"ERR_ACTIVATE_CARD_DECLINED",params:{message:"Card activation declined"}}},notificationServiceUnavailable:{summary:"Notification service unavailable",value:{code:"ERR_NOTIFICATION_SERVICE_UNAVAILABLE",params:{message:"Notification service is not available for your account at this time. Please contact support."}}}}}}},500:{description:"Internal server error",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_INTERNAL_SERVER_ERROR"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["An unexpected error occurred. Please try again later."]}}}}},examples:{internalServerError:{summary:"Internal server error",value:{code:"ERR_INTERNAL_SERVER_ERROR",params:{message:"An unexpected error occurred. Please try again later."}}}}}}},504:e["#/components/responses/LambdaTimeout"]}}}},components:{responses:{LambdaTimeout:{description:"Gateway Timeout ‚Äì task took too long",content:{"application/json":{schema:{type:"object",required:["errorMessage"],properties:{errorMessage:{type:"string",examples:["Task timed out after 1.10 seconds"]}}},examples:{lambdaTimeout:{summary:"Lambda execution timed out",value:{errorMessage:"Task timed out after 1.10 seconds"}}}}}},ValidationError:{description:"Validation failed",content:{"application/json":{schema:e["#/components/schemas/ValidationError"],examples:{validationError:{summary:"Validation failed",value:{code:"ERR_VALIDATION_FAILED",params:{message:"Missing required field or invalid field format",missingProperty:"cardRefNum"}}}}}}},BadRequest:{description:"Bad Request - validation failed",content:{"application/json":{schema:e["#/components/schemas/BadRequest"],examples:{badRequest:{summary:"Missing required field",value:{code:"ERR_VALIDATION_FAILED",params:{missingProperty:"requestType"}}}}}}},AuthenticationError:{description:"Authentication context is missing or invalid",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_AUTH_CONTEXT"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["Authentication context is missing"]}}}}},examples:{authError:{summary:"Authentication error",value:{code:"ERR_AUTH_CONTEXT",params:{message:"Authentication context is missing"}}}}}}},ConflictError:{description:"Conflict ‚Äì operation declined",content:{"application/json":{schema:e["#/components/schemas/ConflictError"],examples:{requestDeclined:{summary:"Operation declined",value:{code:"ERR_REQUEST_DECLINED",params:{message:"Operation was declined"}}}}}}},InternalServerError:{description:"An unexpected error occurred",content:{"application/json":{schema:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_INTERNAL_SERVER_ERROR"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["An unexpected error occurred. Please try again later."]}}}}},examples:{internalError:{summary:"Internal server error",value:{code:"ERR_INTERNAL_SERVER_ERROR",params:{message:"An unexpected error occurred. Please try again later."}}}}}}}},schemas:{SuccessEnvelope:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["SUCCESS_REQUEST_PROCESSED"]},params:{type:"object",required:["requestType"],properties:{requestType:{type:"string",examples:["NewAccountNewCustomer"]}}}}},ErrorEnvelope:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_REQUEST_DECLINED"]},params:{type:"object",properties:{message:{type:"string",examples:["An error occurred processing the request"]}}}}},BadRequest:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_VALIDATION_FAILED"]},params:{type:"object",required:["missingProperty"],properties:{missingProperty:{type:"string",examples:["requestType"]}}}}},CardAlreadyAssigned:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_CARD_ALREADY_ASSIGNED"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["This Card Is Already Assigned To A Customer!"]}}}}},Customer:{type:"object",required:["requestType","accountNum","cardRefNum","embossedName","firstName","lastName","nationalId","passport"],properties:{requestType:{type:"string",description:"**Required.** Request type:\n- `NewAccountNewCustomer`: New customer  \n- `NewAccountExistingCustomer`: Existing customer\n"},cardRefNum:{type:"string",description:"**Required.** Card reference number"},embossedName:{type:"string",description:"**Required.** Name to be embossed on the card"},accountNum:{type:"string",description:"**Required.** Account number to link to the card"},firstName:{type:"string",description:"**Conditionally Required:** Required when requestType is 'NewAccountNewCustomer'. Customer's first name"},middleName:{type:"string",description:"**Optional.** Customer's middle name"},lastName:{type:"string",description:"**Conditionally Required:** Required when requestType is 'NewAccountNewCustomer'. Customer's last name"},nationalId:{type:"string",description:"**Conditionally Required:** One of nationalId or passport is required. Customer's national ID"},passport:{type:"string",description:"**Conditionally Required:** One of nationalId or passport is required. Customer's passport number"},birthDate:{type:"string",format:"date",pattern:"^\\d{4}-\\d{2}-\\d{2}$",description:"**Optional.** Date of birth in YYYY-MM-DD format",examples:["1990-01-01"]},email:{type:"string",format:"email",description:"**Optional.** Customer's email address"},mobilePhone:{type:"string",description:"**Optional.** Customer's mobile phone number"},streetTitle:{type:"string",description:"**Optional.** Customer's street address"},zip:{type:"string",description:"**Optional.** Customer's postal code"}}},PinSetting:{type:"object",required:["pan","pinBlock"],properties:{pan:{type:"string",description:"**Required.** The Primary Account Number (PAN) of the card",examples:["1234567890123456"]},pinBlock:{type:"string",description:"**Required.** The encrypted PIN block containing the new PIN",examples:["ABC123DEF456"]}}},PinChanging:{type:"object",required:["pan","oldPinBlock","newPinBlock"],properties:{pan:{type:"string",description:"**Required.** The Primary Account Number (PAN) of the card",examples:["1234567890123456"]},oldPinBlock:{type:"string",description:"**Required.** The encrypted PIN block containing the current PIN for verification",examples:["OLD123PIN456"]},newPinBlock:{type:"string",description:"**Required.** The encrypted PIN block containing the new PIN to be set",examples:["NEW789PIN012"]}}},ValidationError:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_VALIDATION_FAILED"]},params:{type:"object",properties:{message:{type:"string",examples:["Missing required field or invalid field format"]},missingProperty:{type:"string",description:"The name of the missing or invalid property",examples:["cardRefNum"]}}}}},ConflictError:{type:"object",required:["code","params"],properties:{code:{type:"string",examples:["ERR_CARD_DECLINED"]},params:{type:"object",required:["message"],properties:{message:{type:"string",examples:["Operation was declined"]}}}}},ServerError:{type:"object",required:["code","params"],properties:{code:{type:"string",enum:["ERR_SUBJECT_ID_NOT_FOUND","ERR_CLIENTID_NOT_FOUND","ERR_INTERNAL_SERVER_ERROR"],examples:["ERR_INTERNAL_SERVER_ERROR"]},params:{type:"object",required:["message"],properties:{message:{examples:["An unexpected error occurred"]}}}}},CreateCardStandard:{type:"object",required:["requestType","firstName","lastName","mobilePhone","nationalId","passport","id","email","streetTitle","zip","birthDate","middleName","notificationStatus"],properties:{requestType:{type:"string",enum:["NewAccountNewCustomer","NewAccountExistingCustomer"],description:"**Required.** Type of request - NewAccountNewCustomer or NewAccountExistingCustomer",examples:["NewAccountNewCustomer"]},firstName:{type:"string",description:"**Conditionally Required:** Required when requestType is 'NewAccountNewCustomer'. Customer's first name",examples:["John"]},lastName:{type:"string",description:"**Conditionally Required:** Required when requestType is 'NewAccountNewCustomer'. Customer's last name",examples:["Doe"]},middleName:{type:"string",description:"**Optional.** Customer's middle name",examples:["William"]},birthDate:{type:"string",format:"date",pattern:"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$",description:"**Optional.** Birth date in YYYY-MM-DD format",examples:["1990-01-15"]},nationalId:{type:"string",description:"**Conditionally Required:** One of nationalId, passport, or identityId is required. Customer's national ID",examples:["1234567890"]},passport:{type:"string",description:"**Conditionally Required:** One of nationalId, passport, or identityId is required. Customer's passport number",examples:["AB1234567"]},identityId:{type:"string",description:"**Conditionally Required:** One of nationalId, passport, or identityId is required. External ID number provided by the bank (use this if customer is not working with nationalId or passport)",examples:["ID123456"]},email:{type:"string",format:"email",pattern:"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",description:"**Optional.** Customer's email address",examples:["john.doe@example.com"]},mobilePhone:{type:"string",description:"**Conditionally Required:** Required when requestType is 'NewAccountNewCustomer'. Customer's mobile phone number",examples:["1234567890"]},streetTitle:{type:"string",description:"**Optional.** Customer's street address",examples:["123 Main Street"]},zip:{type:"string",description:"**Optional.** Customer's postal code",examples:["12345"]},notificationStatus:{type:"string",enum:["enabled","disabled"],description:"**Optional.** Notification preference - enabled or disabled",examples:["enabled"]},autoActivate:{type:"boolean",description:"**Optional.** Set to true to automatically activate the card after creation (default: false)",default:!1,examples:[!1]}}}},parameters:{apiKey:{name:"x-api-key",in:"header",required:!0,schema:{type:"string"},description:"API key for authentication"},contentType:{name:"Content-Type",in:"header",required:!0,schema:{type:"string",default:"application/json"},description:"Content type of the request body"}}}};export{s as schema};
//# sourceMappingURL=generalapi.yaml-Bvlp2Ryu.js.map
