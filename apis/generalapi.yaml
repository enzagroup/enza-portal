openapi: 3.0.1
info:
  title: Enza REST API Documentation
  description: |
    **Welcome to the Enza REST API Developer Portal**
    
    Our API provides seamless integration for instant issuing services across Africa. This portal offers all the necessary tools, detailed documentation, and API endpoints required to empower your financial operations with real-time card issuance capabilities.
    
    ## Key Features
    - **Instant Card Issuance**: Issue physical and virtual cards in real-time
    - **Card Management**: Complete lifecycle management from creation to closure
    - **Transaction Monitoring**: Real-time transaction tracking and reporting
    - **PIN Management**: Secure PIN operations for enhanced security
    - **E-Commerce Controls**: Manage online transaction capabilities
    
    ## Getting Started
    All API requests require:
    - `x-api-key` is required for authentication
    
    Base URL: `https://uat-api.enza.cloud/TX/v1`
  version: 2025-02-16T14:26:47Z

servers:
  - url: https://uat-api.enza.cloud/TX/v1

tags:
  - name: "Card Management"
    description: "Operations for creating, activating, and managing card status"
  - name: "Card Information"
    description: "Retrieve card details and customer card information"
  - name: "Customer Management"
    description: "Retrieve and manage customer information"
  - name: "Transactions"
    description: "View and manage card transaction history"
  - name: "E-Commerce"
    description: "Manage e-commerce and online transaction settings"
  - name: "PIN Management"
    description: "Set and change card PINs securely"
  - name: "Instant Issuing"
    description: "Instant card issuance for new and existing customers"

paths:
  ##Customer
  ##CARDS
  
  /customers/details:
    post:
      operationId: getCustomerDetails
      summary: Get Customer Details
      description: |
        Retrieve comprehensive customer details by National ID or Passport.
        
        **Search By:**
        - National ID number, OR
        - Passport number
        
      tags:
        - Customer Management
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nationalId
                - passport
              properties:
                nationalId:
                  type: string
                  description: Either nationalId or passport is required. Customer's national ID
                  example: "NAT123456"
                passport:
                  type: string
                  description: Either nationalId or passport is required. Customer's passport number
                  example: "passport03"
            example:
              passport: "passport03"
      responses:
        '200':
          description: Customer details successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: SUCCESS_CUSTOMER_DETAILS_RETRIEVED
                  params:
                    type: object
                    required:
                      - firstName
                      - lastName
                      - birthDate
                      - status
                      - email
                      - mobilePhone
                    properties:
                      firstName:
                        type: string
                        description: Customer first name
                        example: "omnia"
                      middleName:
                        type: string
                        description: Customer middle name
                        example: "API"
                      lastName:
                        type: string
                        description: Customer last name
                        example: "Testing"
                      birthDate:
                        type: string
                        format: date-time
                        description: Date of birth
                        example: "1989-12-31T19:00:00.000"
                      status:
                        type: string
                        description: Customer status (N=Normal)
                        example: "N"
                      email:
                        type: string
                        format: email
                        description: Primary email address
                        example: "a@a.com"
                      mobilePhone:
                        type: string
                        description: Primary mobile phone
                        example: "01158900152"
                      homeAddress:
                        type: object
                        properties:
                          streetTitle:
                            type: string
                            description: Street address
                            example: "asd"
                          zip:
                            type: string
                            description: Postal code
                            example: "11728"
              examples:
                successResponse:
                  summary: Customer details retrieved successfully
                  value:
                    code: SUCCESS_CUSTOMER_DETAILS_RETRIEVED
                    params:
                      firstName: "omnia"
                      middleName: "API"
                      lastName: "Testing"
                      birthDate: "1989-12-31T19:00:00.000"
                      status: "N"
                      email: "a@a.com"
                      mobilePhone: "01158900152"
                      homeAddress:
                        streetTitle: "asd"
                        zip: "11728"
        '400':
          description: 'Bad request – validation failed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                badRequestExample:
                  summary: Missing required fields
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      message: "Both nationalId and passport are required"
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '409':
          description: 'Customer not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
              examples:
                customerNotFound:
                  summary: Customer not found
                  value:
                    code: ERR_REQUEST_DECLINED
                    params:
                      message: Customer not found
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/LambdaTimeout'

  /instant-issuing:
    post:
      operationId: instantIssueCard
      summary: Instant Issue Card
      description: |
        Instantly issue a card for a new or existing customer.
        
        This endpoint handles two scenarios:
        
        | Scenario                | RequestType Value           |
        |-------------------------|-----------------------------|
        | New customer            | `NewAccountNewCustomer`     |
        | Existing customer       | `NewAccountExistingCustomer`|

      tags:
        - Instant Issuing
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
            example:
              requestType: NewAccountNewCustomer
              lastName: EEE
              firstName: Cust02
              birthDate: 1990-01-20
              passport: "76238310075"
              email: test@test.com
              mobilePhone: '9991234567'
              streetTitle: Baker's Str
              zip: WC1X 9NX
              accountNum: AAABBB150573
              cardRefNum: '000515'
              embossedName: Cust02 New

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessEnvelope'
              examples:
                directSuccess:
                  summary: Direct success example
                  value:
                    code: SUCCESS_REQUEST_PROCESSED
                    params:
                      requestType: NewAccountNewCustomer

        '400':
          description: Bad request – validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              examples:
                validationFailure:
                  summary: Missing required field
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      missingProperty: requestType
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '409':
          description: 'Conflict – card already assigned'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardAlreadyAssigned'
              examples:
                conflictError:
                  summary: Card already assigned example
                  value:
                    code: ERR_CARD_ALREADY_ASSIGNED
                    params:
                      message: This Card Is Already Assigned To A Customer!

        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema:
                type: object
                required: [errorMessage]
                properties:
                  errorMessage:
                    type: string
                    description: Timeout error message
                    example: Task timed out after 1.10 seconds
              examples:
                lambdaTimeout:
                  summary: Lambda execution timed out
                  value:
                    errorMessage: Task timed out after 1.10 seconds

  /cards/tds-enrollment:
    post:
      operationId: updateEcommerceStatus
      summary: Enable or Disable E-Commerce Transactions
      description: |
        Control e-commerce (online) transaction capabilities for a card.
      tags:
        - E-Commerce
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      requestBody:
        description: Details for updating ECstatus of a card.
        content:
          application/json:
            schema:
              type: object
              required: [ecStatusEnable, cardRefNum]
              properties:
                cardRefNum:
                  type: string
                  description: "**Required.** Card reference number"
                ecStatusEnable:
                  type: string
                  description: '**Required.** EC status: `"1"` = Enrolled, `"0"` = Not enrolled'

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: SUCCESS_ECSTATUS_CHANGED
                  params:
                    type: object
                    required:
                      - status
                    properties:
                      status:
                        type: string
                        example: Enabled
              examples:
                successResponse:
                  summary: Successful Request Example
                  value:
                    code: SUCCESS_ECSTATUS_CHANGED
                    params:
                      status: Enabled
        '400':
          description: 'Bad request – validation failed'
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_VALIDATION_FAILED
                  params:
                    type: object
                    required:
                      - missingProperty
                    properties:
                      missingProperty:
                        type: string
                        example: cardRefNum
              examples:
                badRequestExample:
                  summary: Missing required field
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      missingProperty: cardRefNum
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '409':
          description: 'Conflict – card not found'
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_READTOKEN_DECLINED
                  params:
                    type: object
                    required:
                      - message
                    properties:
                      message:
                        type: string
                        example: Card not found
              examples:
                conflictExample:
                  summary: Card not found
                  value:
                    code: ERR_READTOKEN_DECLINED
                    params:
                      message: Card not found
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/LambdaTimeout'

  /cards/update-status-by-ref:
    post:
      operationId: updateCardStatusByRefNum
      tags:
        - Card Management
      summary: Update Card Status by Reference Number
      description: |
        Update card status using the card reference number.

      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cardStatus
                - cardRefNum
              properties:
                cardStatus:
                  type: string
                  description: "**Required.** Allowed values ⇒ **Active** | **Deactivated**"
                  enum: [Active, Deactivated]   # ← this drives the drop-down
                  example: Active
                cardRefNum:
                  type: string
                  description: "**Required.** Unique card reference number"

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: SUCCESS_CARDSTATUS_CHANGED
                  params:
                    type: object
                    required:
                      - status
                    properties:
                      status:
                        type: string
                        example: Active
              examples:
                successResponse:
                  summary: Successful card-status change
                  value:
                    code: SUCCESS_CARDSTATUS_CHANGED
                    params:
                      status: Active
        '400':
          description: 'Bad request – validation failed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                badRequestExample:
                  summary: Missing required field
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      message: "Missing required field: cardRefNum"
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '409':
          description: 'Conflict – card declined'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
              examples:
                conflictExample:
                  summary: 'Card declined – Card not found'
                  value:
                    code: ERR_CARD_DECLINED
                    params:
                      message: Card not found
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/LambdaTimeout'

  ##PIN Management
  /pin/set:
    post:
      operationId: setCardPin
      summary: Set PIN for Card
      description: |
        Set a new PIN for a card using the encrypted PIN block.
      tags:
        - PIN Management
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PinSetting'
            example:
              pan: "1234567890123456"
              pinBlock: "ABC123DEF456"

      responses:
        '200':
          description: PIN successfully set
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: SUCCESS_PIN_SET
                  params:
                    type: object
              examples:
                successResponse:
                  summary: PIN Set Successfully
                  value:
                    code: SUCCESS_PIN_SET
                    params: {}
        '400':
          description: 'Bad request – validation failed'
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_VALIDATION_FAILED
                  params:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Invalid PIN block format
                      missingProperty:
                        type: string
                        example: pan
              examples:
                badRequestExample:
                  summary: Missing required field
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      missingProperty: pan
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '409':
          description: 'Conflict – PIN setting declined'
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_PIN_SETTING_DECLINED
                  params:
                    type: object
                    required:
                      - message
                    properties:
                      message:
                        type: string
                        example: "Invalid PIN block format"
              examples:
                conflictExample:
                  summary: PIN setting declined
                  value:
                    code: ERR_PIN_SETTING_DECLINED
                    params:
                      message: "Invalid PIN block format"
                invalidPinBlock:
                  summary: Invalid PIN block format
                  value:
                    code: ERR_INVALID_PIN_BLOCK
                    params:
                      message: Invalid PIN block format
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          description: Request timeout
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_TIMEOUT
                  params:
                    type: object
                    required:
                      - message
                    properties:
                      message:
                        type: string
                        example: Request timeout. Please try again later.
              examples:
                timeoutExample:
                  summary: Request timeout
                  value:
                    code: ERR_TIMEOUT
                    params:
                      message: Request timeout. Please try again later.

  /cards/retrieve-pin-block:
    post:
      operationId: retrievePinBlock
      summary: Retrieve PIN Block for Card
      description: |
        Retrieve the encrypted PIN block for a card.
        
        **Note:** If the PIN block is not stored or restricted by policy, an error will be returned.
      tags:
        - PIN Management
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cardId
              properties:
                cardId:
                  type: string
                  description: "**Required.** Card ID"
                  example: "12345"
            example:
              cardId: "12345"
      responses:
        '200':
          description: PIN block successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: SUCCESS_PIN_BLOCK_RETRIEVED
                  params:
                    type: object
                    required:
                      - cardId
                      - pinBlock
                    properties:
                      cardId:
                        type: string
                        description: Card ID
                        example: "12345"
                      pinBlock:
                        type: string
                        description: Encrypted PIN block
                        example: "ABC123DEF456"
              examples:
                successResponse:
                  summary: PIN block retrieved successfully
                  value:
                    code: SUCCESS_PIN_BLOCK_RETRIEVED
                    params:
                      cardId: "12345"
                      pinBlock: "ABC123DEF456"
        '400':
          description: 'Bad request – validation failed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                badRequestExample:
                  summary: Missing required field
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      message: "Missing required field: cardId"
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '409':
          description: 'Conflict – request declined'
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_PIN_BLOCK_NOT_AVAILABLE
                  params:
                    type: object
                    required:
                      - message
                    properties:
                      message:
                        type: string
                        example: PIN block is not available
              examples:
                pinBlockNotAvailable:
                  summary: PIN block not available
                  value:
                    code: ERR_PIN_BLOCK_NOT_AVAILABLE
                    params:
                      message: "PIN block is not available. Either the value isn't stored or your response is restricted by policy"
                pinBlockNotFound:
                  summary: PIN block not found
                  value:
                    code: ERR_PIN_BLOCK_NOT_FOUND
                    params:
                      message: PIN block not found for this card
                cardNotFound:
                  summary: Card not found
                  value:
                    code: ERR_CARD_NOT_FOUND
                    params:
                      message: Card #12345 not found
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/LambdaTimeout'

  /pin/change:
    post:
      operationId: changeCardPin
      summary: Change PIN for Card
      description: |
        Change a card's PIN by providing both the current and new encrypted PIN blocks.
      tags:
        - PIN Management
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PinChanging'
            example:
              pan: "1234567890123456"
              oldPinBlock: "OLD123PIN456"
              newPinBlock: "NEW789PIN012"

      responses:
        '200':
          description: PIN successfully changed
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: SUCCESS_PIN_CHANGED
                  params:
                    type: object
              examples:
                successResponse:
                  summary: PIN Changed Successfully
                  value:
                    code: SUCCESS_PIN_CHANGED
        '400':
          description: 'Bad request – validation failed'
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_VALIDATION_FAILED
                  params:
                    type: object
                    properties:
                      missingProperty:
                        type: string
                        example: oldPinBlock
              examples:
                badRequestExample:
                  summary: Missing required field
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      missingProperty: oldPinBlock
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '409':
          description: 'Conflict – PIN change declined'
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
              properties:
                code:
                  type: string
                  example: ERR_PIN_CHANGE_DECLINED
                params:
                  type: object
                  required:
                    - message
                  properties:
                    message:
                      type: string
                      example: "Invalid PIN block format"
              examples:
                conflictExample:
                  summary: PIN change declined
                  value:
                    code: ERR_PIN_CHANGE_DECLINED
                    params:
                      message: "Invalid PIN block format"
                invalidPinBlock:
                  summary: Invalid PIN block format
                  value:
                    code: ERR_INVALID_PIN_BLOCK
                    params:
                      message: Invalid PIN block format
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          description: Request timeout
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_TIMEOUT
                  params:
                    type: object
                    required:
                      - message
                    properties:
                      message:
                        type: string
                        example: Request timeout. Please try again later.
              examples:
                timeoutExample:
                  summary: Request timeout
                  value:
                    code: ERR_TIMEOUT
                    params:
                      message: Request timeout. Please try again later.
  /cards/update-status-by-id:
    post:
      operationId: updateCardStatusById
      tags:
        - Card Management
      summary: Update Card Status by Card ID
      description: |
        Update card status using the card ID.

      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cardStatus
                - cardId
              properties:
                cardStatus:
                  type: string
                  description: "**Required.** Allowed values ⇒ **Active** | **Deactivated** | **Blocked**"
                  enum: [Active, Deactivated, Blocked]
                  example: Active
                cardId:
                  type: string
                  description: "**Required.** Unique card ID"
                  example: "12345"
                reason:
                  type: string
                  description: Optional reason for status change
                  example: "Customer request"

      responses:
        '200':
          description: Card status successfully changed
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: SUCCESS_CARDSTATUS_CHANGED
                  params:
                    type: object
                    required:
                      - status
                    properties:
                      status:
                        type: string
                        example: Active
              examples:
                successResponse:
                  summary: Successful card-status change
                  value:
                    code: SUCCESS_CARDSTATUS_CHANGED
                    params:
                      status: Active
        '400':
          description: 'Bad request – validation failed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                badRequestExample:
                  summary: Missing required field
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      message: "Missing required field: cardId"
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '409':
          description: 'Conflict – card status change declined'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
              examples:
                conflictExample:
                  summary: Card declined
                  value:
                    code: ERR_CARD_DECLINED
                    params:
                      message: Card not found
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/LambdaTimeout'

  /cards/card-details/{card_Id}:
    get:
      operationId: getCardDetails
      tags:
        - Card Information
      summary: Get Card Details by Card ID
      description: |
        Retrieve comprehensive card information using the card ID.

      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
        - name: card_Id
          in: path
          required: true
          description: Card ID to retrieve details for
          schema:
            type: string
            example: "12345"

      responses:
        '200':
          description: Card details successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: SUCCESS_CARD_DETAILS_RETRIEVED
                  params:
                    type: object
                    required:
                      - maskedPan
                      - status
                      - expiryDate
                      - availableBalance
                      - currency
                    properties:
                      maskedPan:
                        type: string
                        description: Masked Primary Account Number
                        example: "123456******1234"
                      status:
                        type: string
                        description: Current card status
                        example: "Active"
                      expiryDate:
                        type: string
                        format: date
                        description: Card expiry date
                        example: "2025-12-31"
                      availableBalance:
                        type: string
                        description: Available balance on the card
                        example: "1500.00"
                      currency:
                        type: string
                        description: Currency code or symbol
                        example: "USD"
              examples:
                successResponse:
                  summary: Successful card details retrieval
                  value:
                    code: SUCCESS_CARD_DETAILS_RETRIEVED
                    params:
                      maskedPan: "123456******1234"
                      status: "Active"
                      expiryDate: "2025-12-31"
                      availableBalance: "1500.00"
                      currency: "USD"
        '400':
          description: 'Bad request – validation failed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                badRequestExample:
                  summary: Missing required field
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      message: "Missing required field: cardId"
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '409':
          description: 'Conflict – card not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
              examples:
                cardNotFound:
                  summary: Card not found
                  value:
                    code: ERR_CARD_NOT_FOUND
                    params:
                      message: Card not found
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/LambdaTimeout'

  /customers/list-of-cards:
    post:
      operationId: listCustomerCards
      tags:
        - Card Information
      summary: List All Customer Cards
      description: |
        Retrieve all cards issued to a customer using their identification document.

        **Search By:**
        - Passport number, OR National ID number
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nationalId
                - passport
              properties:
                passport:
                  type: string
                  description: Either nationalId or passport is required. Customer's passport number
                  example: "76238310075"
                nationalId:
                  type: string
                  description: Either nationalId or passport is required. Customer's national ID
                  example: "1234567890"
            example:
              passport: "76238310075"

      responses:
        '200':
          description: Cards successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: SUCCESS_CARDS_RETRIEVED
                  params:
                    type: object
                    required:
                      - totalCards
                      - cards
                    properties:
                      totalCards:
                        type: integer
                        description: Total number of cards found
                        example: 2
                      cards:
                        type: array
                        items:
                          type: object
                          properties:
                            cardId:
                              type: string
                              description: Card ID
                              example: "12345"
                            maskedPan:
                              type: string
                              description: Masked card PAN
                              example: "123456******1234"
                            productName:
                              type: string
                              description: Card product name
                              example: "Visa Debit Card"
                            status:
                              type: string
                              description: Card status
                              example: "Active"
                            expiryDate:
                              type: string
                              format: date
                              description: Card expiry date
                              example: "2025-12-31"
              examples:
                successResponse:
                  summary: Successful cards retrieval
                  value:
                    code: SUCCESS_CARDS_RETRIEVED
                    params:
                      totalCards: 2
                      cards:
                        - cardId: "12345"
                          maskedPan: "123456******1234"
                          productName: "Visa Debit Card"
                          status: "Active"
                          expiryDate: "2025-12-31"
                        - cardId: "67890"
                          maskedPan: "123456******5678"
                          productName: "Mastercard Debit"
                          status: "Deactivated"
                          expiryDate: "2026-06-30"
        '400':
          description: 'Bad request – validation failed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                badRequestExample:
                  summary: Missing identification document
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      message: Either passport or nationalId is required
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '409':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
              examples:
                customerNotFound:
                  summary: Customer not found
                  value:
                    code: ERR_CUSTOMER_NOT_FOUND
                    params:
                      message: Customer doesn't exist
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/LambdaTimeout'

  /cards/delete-card:
    post:
      operationId: deleteCard
      summary: Delete Card
      description: |
        Permanently delete a card using either its card ID or external RID.
        
        **Warning:** This operation is irreversible. The card will be permanently removed from the system.
      tags:
        - Card Management
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - cardId
                - extRid
              properties:
                cardId:
                  type: string
                  description: "Either cardId or extRid is required. Card ID to delete"
                  example: "3255"
                extRid:
                  type: string
                  description: "Either cardId or extRid is required. External RID to delete card"
                  example: "TestVenCorporate1"
            examples:
              deleteByCardId:
                summary: Delete by Card ID
                value:
                  cardId: "3255"
              deleteByExtRid:
                summary: Delete by External RID
                value:
                  extRid: "TestVenCorporate1"
      responses:
        '200':
          description: Card successfully deleted
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                properties:
                  code:
                    type: string
                    example: SUCCESS_CARD_DELETED
              examples:
                successResponse:
                  summary: Card deleted successfully
                  value:
                    code: SUCCESS_CARD_DELETED
        '400':
          description: 'Bad request – validation failed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                badRequestExample:
                  summary: Missing required field
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      message: "One of the following fields is required: cardId, extRid"
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '409':
          description: 'Conflict – card not found or cannot be deleted'
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_CARD_NOT_FOUND
                  params:
                    type: object
                    required:
                      - message
                    properties:
                      message:
                        type: string
                        example: Card not found
              examples:
                cardNotFound:
                  summary: Card not found
                  value:
                    code: ERR_CARD_NOT_FOUND
                    params:
                      message: Card #3255 not found
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/LambdaTimeout'

  /cards/list-of-transactions:
    post:
      operationId: getTransactionHistory
      tags:
        - Transactions
      summary: Get Transaction History
      description: |
        Retrieve detailed transaction history for a card within a specified date range.
        
        **Date Range:** Specify startDate and endDate to filter transactions
        
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cardId
                - startDate
                - endDate
              properties:
                cardId:
                  type: string
                  description: "**Required.** Card ID"
                  example: "12345"
                startDate:
                  type: string
                  format: date
                  pattern: '^\d{4}-\d{2}-\d{2}$'
                  description: "**Required.** Start date in YYYY-MM-DD format"
                  example: "2025-01-01"
                endDate:
                  type: string
                  format: date
                  pattern: '^\d{4}-\d{2}-\d{2}$'
                  description: "**Required.** End date in YYYY-MM-DD format"
                  example: "2025-01-31"
                transactionCount:
                  type: integer
                  minimum: 1
                  maximum: 100
                  description: "Optional. Maximum number of transactions to return (1-100)"
                  example: 2
            example:
              cardId: "12345"
              startDate: "2025-01-01"
              endDate: "2025-01-31"
              transactionCount: 2
      responses:
        '200':
          description: Transactions successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: SUCCESS_TRANSACTIONS_RETRIEVED
                  params:
                    type: object
                    required:
                      - cardId
                      - startDate
                      - endDate
                      - totalTransactions
                      - transactions
                    properties:
                      cardId:
                        type: string
                        description: Card ID
                        example: "3280"
                      startDate:
                        type: string
                        format: date
                        description: Start date of query
                        example: "2025-07-01"
                      endDate:
                        type: string
                        format: date
                        description: End date of query
                        example: "2025-10-02"
                      totalTransactions:
                        type: integer
                        description: Total number of transactions
                        example: 31
                      transactions:
                        type: array
                        items:
                          type: object
                          required:
                            - transactionId
                            - transactionKind
                            - transactionLabel
                            - transactionType
                            - amount
                            - currency
                            - date
                            - timestamp
                            - terminalOwnerTitle
                            - terminalType
                          properties:
                            transactionId:
                              type: string
                              description: Unique transaction identifier
                              example: "251002511421445346"
                            transactionKind:
                              type: string
                              description: Kind of transaction
                              example: "Goods"
                            transactionLabel:
                              type: string
                              description: Transaction label
                              example: "Purchase"
                            transactionType:
                              type: string
                              description: Transaction type (Debit/Credit)
                              example: "Debit"
                            amount:
                              type: number
                              description: Transaction amount
                              example: 45
                            currency:
                              type: string
                              description: Currency code
                              example: "USD"
                            date:
                              type: string
                              format: date
                              description: Transaction date
                              example: "2025-10-02"
                            timestamp:
                              type: string
                              format: date-time
                              description: Transaction timestamp
                              example: "2025-10-02T14:12:22.000"
                            terminalOwnerTitle:
                              type: string
                              description: Terminal owner/acquirer name
                              example: "ACQUIRER NAME"
                            terminalType:
                              type: string
                              description: Type of terminal
                              example: "Pos"
              examples:
                successResponse:
                  summary: Successful transactions retrieval
                  value:
                    code: SUCCESS_TRANSACTIONS_RETRIEVED
                    params:
                      cardId: "3280"
                      startDate: "2025-07-01"
                      endDate: "2025-10-02"
                      totalTransactions: 2
                      transactions:
                        - transactionId: "251002511421445346"
                          transactionKind: "Goods"
                          transactionLabel: "Purchase"
                          transactionType: "Debit"
                          amount: 45
                          currency: "USD"
                          date: "2025-10-02"
                          timestamp: "2025-10-02T14:12:22.000"
                          terminalOwnerTitle: "ACQUIRER NAME"
                          terminalType: "Pos"
                        - transactionId: "250925476227641819"
                          transactionKind: "Goods"
                          transactionLabel: "Purchase"
                          transactionType: "Debit"
                          amount: 21
                          currency: "USD"
                          date: "2025-09-25"
                          timestamp: "2025-09-25T13:13:42.000"
                          terminalOwnerTitle: "ACQUIRER NAME"
                          terminalType: "Pos"
        '400':
          description: 'Bad request – validation failed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                badRequestExample:
                  summary: Invalid date format
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      message: Invalid startDate format
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '409':
          description: 'Conflict – card not found'
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_READTOKEN_DECLINED
                  params:
                    type: object
                    required:
                      - message
                    properties:
                      message:
                        type: string
                        example: Card not found
              examples:
                conflictExample:
                  summary: Card not found
                  value:
                    code: ERR_READTOKEN_DECLINED
                    params:
                      message: Card not found
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/LambdaTimeout'

  /cards/get-pan:
    post:
      operationId: getCardPan
      summary: Get PAN for Card
      description: |
        Retrieve the unmasked PAN (Primary Account Number) for a card using its card ID.
        
        **Note:** This operation returns the full, unmasked PAN. Handle with appropriate security measures.
      tags:
        - Card Management
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cardId
              properties:
                cardId:
                  type: string
                  description: "**Required.** Card ID"
                  example: "12345"
            example:
              cardId: "12345"
      responses:
        '200':
          description: PAN successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: SUCCESS_PAN_RETRIEVED
                  params:
                    type: object
                    required:
                      - pan
                    properties:
                      pan:
                        type: string
                        description: Primary Account Number (unmasked)
                        example: "4373580001009606"
              examples:
                successResponse:
                  summary: PAN retrieved successfully
                  value:
                    code: SUCCESS_PAN_RETRIEVED
                    params:
                      pan: "4373580001009606"
        '400':
          description: 'Bad request – validation failed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                badRequestExample:
                  summary: Missing required field
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      message: "Missing required field: cardId"
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '409':
          description: 'Conflict – request declined'
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_CARD_NOT_FOUND
                  params:
                    type: object
                    required:
                      - message
                    properties:
                      message:
                        type: string
                        example: Card not found
              examples:
                cardNotFound:
                  summary: Card not found
                  value:
                    code: ERR_CARD_NOT_FOUND
                    params:
                      message: Card #12345 not found
                panNotAvailable:
                  summary: PAN not available
                  value:
                    code: ERR_PAN_NOT_AVAILABLE
                    params:
                      message: PAN is not available for this card
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/LambdaTimeout'

  /cards/get-cvv2:
    post:
      operationId: getCardCvv2
      summary: Get CVV2 for Card
      description: |
        Retrieve the CVV2 (Card Verification Value) for a card using its PAN (Primary Account Number).
        
        **Note:** This operation calculates and returns the CVV2 value for the specified card.
      tags:
        - Card Management
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pan
              properties:
                pan:
                  type: string
                  pattern: '^[0-9]{13,19}$'
                  description: "**Required.** Primary Account Number (13-19 digits)"
                  example: "4373580001009606"
            example:
              pan: "4373580001009606"
      responses:
        '200':
          description: CVV2 successfully retrieved
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: SUCCESS_CVV2_RETRIEVED
                  params:
                    type: object
                    required:
                      - cvv2
                    properties:
                      cvv2:
                        type: string
                        description: Card Verification Value 2
                        example: "123"
              examples:
                successResponse:
                  summary: CVV2 retrieved successfully
                  value:
                    code: SUCCESS_CVV2_RETRIEVED
                    params:
                      cvv2: "123"
        '400':
          description: 'Bad request – validation failed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                badRequestExample:
                  summary: Invalid PAN format
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      message: "Invalid pan format"
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '409':
          description: 'Conflict – request declined'
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_CARD_NOT_FOUND
                  params:
                    type: object
                    required:
                      - message
                    properties:
                      message:
                        type: string
                        example: Card not found
              examples:
                cardNotFound:
                  summary: Card not found
                  value:
                    code: ERR_CARD_NOT_FOUND
                    params:
                      message: Card with PAN ending 9606 not found
                cvv2NotAvailable:
                  summary: CVV2 not available
                  value:
                    code: ERR_CVV2_NOT_AVAILABLE
                    params:
                      message: CVV2 is not available for this card
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/LambdaTimeout'

  /cards/create-card:
    post:
      operationId: createCardWithOnboarding
      tags:
        - Card Management
      summary: Create Card
      description: |
        Complete end-to-end card issuance with customer onboarding (card remains inactive).
        
        **Supports both New and Existing Customers:**
        - **New Customer**: Creates customer profile and issues card
        - **Existing Customer**: Links card to existing customer profile
        
        **Process Flow:**
        1. **Customer Verification**: Check if customer exists using document ID (NationalId or Passport)
        2. **Customer Creation**: Create new customer profile (if new) OR link to existing customer
        3. **Card Issuance**: Issue the card (status remains inactive)
        4. **Notifications**: Set up SMS/Email notifications (if enabled)
        
        **Note:** Card is NOT automatically activated. Use separate activation endpoint if needed.
        
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCardStandard'
            example:
              requestType: "NewAccountNewCustomer"
              firstName: "John"
              lastName: "Doe"
              middleName: "William"
              birthDate: "1990-01-15"
              nationalId: "1234567890"
              email: "john.doe@example.com"
              mobilePhone: "1234567890"
              streetTitle: "123 Main Street"
              zip: "12345"
              notificationStatus: "enabled"
      responses:
        '200':
          description: Card successfully created
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: SUCCESS_REQUEST_PROCESSED
                  params:
                    type: object
                    required:
                      - customerType
                      - personId
                      - cardId
                      - cardDetails
                      - notificationEnabled
                    properties:
                      customerType:
                        type: string
                        enum: [New, Existing]
                        description: Whether customer is new or existing
                        example: New
                      personId:
                        type: string
                        description: Customer person ID
                        example: "PERS12345"
                      cardId:
                        type: string
                        description: Card ID
                        example: "12345"
                      cardDetails:
                        type: object
                        required:
                          - pan
                          - expirationDate
                          - cvv2
                        properties:
                          pan:
                            type: string
                            description: Primary Account Number
                            example: "1234567890123456"
                          expirationDate:
                            type: string
                            format: date
                            description: Card expiration date in YYYY-MM-DD format
                            example: "2027-12-31"
                          cvv2:
                            type: string
                            description: Card verification value
                            example: "123"
                      notificationEnabled:
                        type: boolean
                        description: Whether notifications are enabled
                        example: true
                      notificationStatus:
                        type: string
                        description: Notification status message (only if already existed)
                        example: "Already Enabled"
              examples:
                successResponse:
                  summary: Card created successfully
                  value:
                    code: SUCCESS_REQUEST_PROCESSED
                    params:
                      customerType: New
                      personId: "PERS12345"
                      cardId: "12345"
                      cardDetails:
                        pan: "1234567890123456"
                        expirationDate: "2027-12-31"
                        cvv2: "123"
                      notificationEnabled: true
        '400':
          description: 'Bad request – validation failed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                badRequestExample:
                  summary: Validation failed
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      message: Invalid Email format
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '409':
          description: 'Conflict – operation declined'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
              examples:
                requestDeclined:
                  summary: New customer request declined
                  value:
                    code: ERR_REQUEST_DECLINED
                    params:
                      message: New customer request declined
                existingGroupDeclined:
                  summary: Existing customer group declined
                  value:
                    code: ERR_EXISTING_GROUP_DECLINED
                    params:
                      message: Existing customer group declined
                activateCardDeclined:
                  summary: Card activation declined
                  value:
                    code: ERR_ACTIVATE_CARD_DECLINED
                    params:
                      message: Card activation declined
                notificationDeclined:
                  summary: Notification contract declined
                  value:
                    code: ERR_NOTIFICATION_DECLINED
                    params:
                      message: Notification contract declined
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_INTERNAL_SERVER_ERROR
                  params:
                    type: object
                    required:
                      - message
                    properties:
                      message:
                        type: string
                        example: An unexpected error occurred. Please try again later.
              examples:
                internalServerError:
                  summary: Internal server error
                  value:
                    code: ERR_INTERNAL_SERVER_ERROR
                    params:
                      message: An unexpected error occurred. Please try again later.
        '504':
          $ref: '#/components/responses/LambdaTimeout'

  /cards/create-card-with-activation:
    post:
      operationId: createCardWithActivation
      tags:
        - Card Management
      summary: Create Card with Activation
      description: |
        Complete end-to-end card issuance with customer onboarding and automatic activation.
        
        **Supports both New and Existing Customers:**
        - **New Customer**: Creates customer profile and issues card
        - **Existing Customer**: Links card to existing customer profile
        
        **Process Flow:**
        1. **Customer Verification**: Check if customer exists using document ID (NationalId or Passport)
        2. **Customer Creation**: Create new customer profile (if new) OR link to existing customer
        3. **Card Activation**: Automatically activate the card (status = Active)
        4. **Card Details**: Retrieve PAN and calculate CVV2
        5. **Notifications**: Set up SMS/Email notifications (if enabled)
        
      parameters:
        - $ref: '#/components/parameters/apiKey'
        - $ref: '#/components/parameters/contentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCardStandard'
            example:
              requestType: "NewAccountNewCustomer"
              firstName: "John"
              lastName: "Doe"
              middleName: "William"
              birthDate: "1990-01-15"
              nationalId: "1234567890"
              email: "john.doe@example.com"
              mobilePhone: "1234567890"
              streetTitle: "123 Main Street"
              zip: "12345"
              notificationStatus: "enabled"
      responses:
        '200':
          description: Card successfully created and activated
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: SUCCESS_REQUEST_PROCESSED
                  params:
                    type: object
                    required:
                      - customerType
                      - personId
                      - cardId
                      - cardDetails
                      - notificationEnabled
                    properties:
                      customerType:
                        type: string
                        enum: [New, Existing]
                        description: Whether customer is new or existing
                        example: New
                      personId:
                        type: string
                        description: Customer person ID
                        example: "PERS12345"
                      cardId:
                        type: string
                        description: Card ID
                        example: "12345"
                      cardDetails:
                        type: object
                        required:
                          - pan
                          - expirationDate
                          - cvv2
                        properties:
                          pan:
                            type: string
                            description: Primary Account Number
                            example: "1234567890123456"
                          expirationDate:
                            type: string
                            format: date
                            description: Card expiration date in YYYY-MM-DD format
                            example: "2027-12-31"
                          cvv2:
                            type: string
                            description: Card verification value
                            example: "123"
                      notificationEnabled:
                        type: boolean
                        description: Whether notifications are enabled
                        example: true
                      notificationStatus:
                        type: string
                        description: Notification status message (only if already existed)
                        example: "Already Enabled"
              examples:
                successResponse:
                  summary: Card created and activated successfully
                  value:
                    code: SUCCESS_REQUEST_PROCESSED
                    params:
                      customerType: New
                      personId: "PERS12345"
                      cardId: "12345"
                      cardDetails:
                        pan: "1234567890123456"
                        expirationDate: "2027-12-31"
                        cvv2: "123"
                      notificationEnabled: true
                      
        '400':
          description: 'Bad request – validation failed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                badRequestExample:
                  summary: Validation failed
                  value:
                    code: ERR_VALIDATION_FAILED
                    params:
                      message: Invalid Email format
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '409':
          description: 'Conflict – operation declined'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
              examples:
                requestDeclined:
                  summary: New customer request declined
                  value:
                    code: ERR_REQUEST_DECLINED
                    params:
                      message: New customer request declined
                existingGroupDeclined:
                  summary: Existing customer group declined
                  value:
                    code: ERR_EXISTING_GROUP_DECLINED
                    params:
                      message: Existing customer group declined
                activateCardDeclined:
                  summary: Card activation declined
                  value:
                    code: ERR_ACTIVATE_CARD_DECLINED
                    params:
                      message: Card activation declined
                notificationDeclined:
                  summary: Notification contract declined
                  value:
                    code: ERR_NOTIFICATION_DECLINED
                    params:
                      message: Notification contract declined
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - params
                properties:
                  code:
                    type: string
                    example: ERR_INTERNAL_SERVER_ERROR
                  params:
                    type: object
                    required:
                      - message
                    properties:
                      message:
                        type: string
                        example: An unexpected error occurred. Please try again later.
              examples:
                internalServerError:
                  summary: Internal server error
                  value:
                    code: ERR_INTERNAL_SERVER_ERROR
                    params:
                      message: An unexpected error occurred. Please try again later.
        '504':
          $ref: '#/components/responses/LambdaTimeout'

components:
  responses:
    LambdaTimeout:
      description: 'Gateway Timeout – task took too long'
      content:
        application/json:
          schema:
            type: object
            required: [errorMessage]
            properties:
              errorMessage:
                type: string
                example: Task timed out after 1.10 seconds
          examples:
            lambdaTimeout:
              summary: Lambda execution timed out
              value:
                errorMessage: Task timed out after 1.10 seconds
    
    AuthenticationError:
      description: 'Authentication context is missing or invalid'
      content:
        application/json:
          schema:
            type: object
            required: [code, params]
            properties:
              code:
                type: string
                example: ERR_AUTH_CONTEXT
              params:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    example: Authentication context is missing
          examples:
            authError:
              summary: Authentication error
              value:
                code: ERR_AUTH_CONTEXT
                params:
                  message: Authentication context is missing
    ConflictError:
      description: 'Conflict – operation declined'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConflictError'
          examples:
            requestDeclined:
              summary: Operation declined
              value:
                code: ERR_REQUEST_DECLINED
                params:
                  message: Operation was declined
    
    InternalServerError:
      description: 'An unexpected error occurred'
      content:
        application/json:
          schema:
            type: object
            required: [code, params]
            properties:
              code:
                type: string
                example: ERR_INTERNAL_SERVER_ERROR
              params:
                type: object
                required: [message]
                properties:
                  message:
                    type: string
                    example: An unexpected error occurred. Please try again later.
          examples:
            internalError:
              summary: Internal server error
              value:
                code: ERR_INTERNAL_SERVER_ERROR
                params:
                  message: An unexpected error occurred. Please try again later.

  schemas:
    SuccessEnvelope:
      type: object
      required: [code, params]
      properties:
        code:
          type: string
          example: SUCCESS_REQUEST_PROCESSED
        params:
          type: object
          required: [requestType]
          properties:
            requestType:
              type: string
              example: NewAccountNewCustomer

    BadRequest:
      type: object
      required: [code, params]
      properties:
        code:
          type: string
          example: ERR_VALIDATION_FAILED
        params:
          type: object
          required: [missingProperty]
          properties:
            missingProperty:
              type: string
              example: requestType

    CardAlreadyAssigned:
      type: object
      required: [code, params]
      properties:
        code:
          type: string
          example: ERR_CARD_ALREADY_ASSIGNED
        params:
          type: object
          required: [message]
          properties:
            message:
              type: string
              example: This Card Is Already Assigned To A Customer!

    Customer:
      type: object
      required:
        [requestType, accountNum, cardRefNum, embossedName, nationalId, passport, firstName, lastName]
      properties:
        requestType:
          type: string
          description: |
            **Required.** Request type:
            - `NewAccountNewCustomer`: New customer  
            - `NewAccountExistingCustomer`: Existing customer
        cardRefNum:
          type: string
          description: "**Required.** Card reference number"
        embossedName:
          type: string
          description: "**Required.** Name to be embossed on the card"
        accountNum:
          type: string
          description: "**Required.** Account number to link to the card"
        firstName:
          type: string
          description: "**Required for new customers.** Customer's first name"
        middleName:
          type: string
          description: Optional. Customer's middle name
        lastName:
          type: string
          description: "**Required for new customers.** Customer's last name"
        nationalId:
          type: string
          description: Either nationalId or passport is required. Customer's national ID
        passport:
          type: string
          description: Either nationalId or passport is required. Customer's passport number
        birthDate:
          type: string
          format: date          
          pattern: '^\d{4}-\d{2}-\d{2}$'
          description: "Date of birth in YYYY-MM-DD format"
          example: '1990-01-01'       
        email:
          type: string
          format: email
          description: "Customer's email address"
        mobilePhone:
          type: string
          description: "Customer's mobile phone number"
        streetTitle:
          type: string
          description: "Customer's street address"
        zip:
          type: string
          description: "Customer's postal code"

    PinSetting:
      type: object
      required:
        - pan
        - pinBlock
      properties:
        pan:
          type: string
          description: "**Required.** The Primary Account Number (PAN) of the card"
          example: "1234567890123456"
        pinBlock:
          type: string
          description: "**Required.** The encrypted PIN block containing the new PIN"
          example: "ABC123DEF456"

    PinChanging:
      type: object
      required:
        - pan
        - oldPinBlock
        - newPinBlock
      properties:
        pan:
          type: string
          description: "**Required.** The Primary Account Number (PAN) of the card"
          example: "1234567890123456"
        oldPinBlock:
          type: string
          description: "**Required.** The encrypted PIN block containing the current PIN for verification"
          example: "OLD123PIN456"
        newPinBlock:
          type: string
          description: "**Required.** The encrypted PIN block containing the new PIN to be set"
          example: "NEW789PIN012"
    
    ValidationError:
      type: object
      required: [code, params]
      properties:
        code:
          type: string
          example: ERR_VALIDATION_FAILED
        params:
          type: object
          properties:
            message:
              type: string
              example: Missing required field or invalid field format
            missingProperty:
              type: string
              description: The name of the missing or invalid property
              example: cardRefNum
    
    ConflictError:
      type: object
      required: [code, params]
      properties:
        code:
          type: string
          example: ERR_CARD_DECLINED
        params:
          type: object
          required: [message]
          properties:
            message:
              type: string
              example: Operation was declined
    
    ServerError:
      type: object
      required: [code, params]
      properties:
        code:
          type: string
          enum: [ERR_SUBJECT_ID_NOT_FOUND, ERR_CLIENTID_NOT_FOUND, ERR_INTERNAL_SERVER_ERROR]
          example: ERR_INTERNAL_SERVER_ERROR
        params:
          type: object
          required: [message]
          properties:
            message:
              example: An unexpected error occurred
    
    CreateCardStandard:
      type: object
      required:
        - requestType
      properties:
        requestType:
          type: string
          enum: [NewAccountNewCustomer, NewAccountExistingCustomer]
          description: "**Required.** Type of request - NewAccountNewCustomer or NewAccountExistingCustomer"
          example: "NewAccountNewCustomer"
        firstName:
          type: string
          description: "**Required for NewAccountNewCustomer.** Customer's first name"
          example: "John"
        lastName:
          type: string
          description: "**Required for NewAccountNewCustomer.** Customer's last name"
          example: "Doe"
        middleName:
          type: string
          description: "Optional. Customer's middle name"
          example: "William"
        birthDate:
          type: string
          format: date
          pattern: '^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'
          description: "Birth date in YYYY-MM-DD format"
          example: "1990-01-15"
        nationalId:
          type: string
          description: "Either nationalId or passport or id is required. Customer's national ID"
          example: "1234567890"
        passport:
          type: string
          description: "Either nationalId or passport or id is required. Customer's passport number"
          example: "AB1234567"
        id:
          type: string
          description: "Either nationalId or passport or id is required. Customer's ID"
          example: "ID123456"
        email:
          type: string
          format: email
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          description: "Customer's email address"
          example: "john.doe@example.com"
        mobilePhone:
          type: string
          description: "**Required for NewAccountNewCustomer.** Customer's mobile phone number"
          example: "1234567890"
        streetTitle:
          type: string
          description: "Customer's street address"
          example: "123 Main Street"
        zip:
          type: string
          description: "Customer's postal code"
          example: "12345"
        notificationStatus:
          type: string
          enum: [enabled, disabled]
          description: "Notification preference - enabled or disabled"
          example: "enabled"
      anyOf:
        - required: [nationalId]
        - required: [passport]
        - required: [id]
      allOf:
        - if:
            properties:
              requestType:
                const: NewAccountNewCustomer
          then:
            required: [firstName, lastName, mobilePhone]

  parameters:
    apiKey:
      name: x-api-key
      in: header
      required: true
      schema:
        type: string
      description: API key for authentication
    contentType:
      name: Content-Type
      in: header
      required: true
      schema:
        type: string
        default: application/json
      description: Content type of the request body
